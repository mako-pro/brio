<?php

namespace placer\brio\engine\compiler;

use placer\brio\engine\BrioException;
use placer\brio\engine\helper\AST;
use placer\brio\engine\helper\BH;
use placer\brio\engine\Compiler;

class Parser
{
    /**
     * Lexer
     *
     * @var \placer\brio\engine\compiler\Tokenizer
     */
    protected $lex;

    /**
     * Compiler
     *
     * @var \placer\brio\engine\Compiler
     */
    protected $compiler;

    /**
     * Constructor
     *
     * @param object $lex
     * @param object $compiler
     */
    public function __construct($lex, $compiler)
    {
        $this->lex      = $lex;
        $this->compiler = $compiler;
    }

    const T_TAG_OPEN       =  1;
    const T_NOT            =  2;
    const T_AND            =  3;
    const T_OR             =  4;
    const T_QUESTION       =  5;
    const T_COLON          =  6;
    const T_EQ             =  7;
    const T_NE             =  8;
    const T_GT             =  9;
    const T_GE             = 10;
    const T_LT             = 11;
    const T_LE             = 12;
    const T_IN             = 13;
    const T_PLUS           = 14;
    const T_MINUS          = 15;
    const T_CONCAT         = 16;
    const T_TIMES          = 17;
    const T_DIV            = 18;
    const T_MOD            = 19;
    const T_PIPE           = 20;
    const T_BITWISE        = 21;
    const T_FILTER_PIPE    = 22;
    const T_HTML           = 23;
    const T_COMMENT        = 24;
    const T_PRINT_OPEN     = 25;
    const T_PRINT_CLOSE    = 26;
    const T_EXTENDS        = 27;
    const T_TAG_CLOSE      = 28;
    const T_INCLUDE        = 29;
    const T_AUTOESCAPE     = 30;
    const T_CUSTOM_END     = 31;
    const T_CUSTOM_TAG     = 32;
    const T_AS             = 33;
    const T_CUSTOM_BLOCK   = 34;
    const T_SPACEFULL      = 35;
    const T_WITH           = 36;
    const T_SET            = 37;
    const T_ASSIGN         = 38;
    const T_LOAD           = 39;
    const T_FOR            = 40;
    const T_COMMA          = 41;
    const T_STEP           = 42;
    const T_EMPTY          = 43;
    const T_IF             = 44;
    const T_ELSE           = 45;
    const T_IFCHANGED      = 46;
    const T_IFEQUAL        = 47;
    const T_IFNOTEQUAL     = 48;
    const T_BLOCK          = 49;
    const T_FILTER         = 50;
    const T_REGROUP        = 51;
    const T_BY             = 52;
    const T_TRUE           = 53;
    const T_FALSE          = 54;
    const T_STRING         = 55;
    const T_INTL           = 56;
    const T_RPARENT        = 57;
    const T_LPARENT        = 58;
    const T_OBJ            = 59;
    const T_DOT            = 60;
    const T_CLASS          = 61;
    const T_BRACKETS_OPEN  = 62;
    const T_BRACKETS_CLOSE = 63;
    const T_ALPHA          = 64;
    const T_DOTDOT         = 65;
    const T_NUMERIC        = 66;
    const YY_NO_ACTION     = 374;
    const YY_ACCEPT_ACTION = 373;
    const YY_ERROR_ACTION  = 372;
    const YY_SZ_ACTTAB     = 1586;

    static public $yyAction = [
        /*     0 */    33,   34,   35,   32,   31,   31,   31,   31,   31,   31,
        /*    10 */    31,   36,   36,   36,   27,   27,   27,   25,   30,   54,
        /*    20 */    62,   51,   74,  193,   43,  241,   45,  175,   66,   71,
        /*    30 */   255,  101,   65,  251,  144,  117,   28,  195,   46,   39,
        /*    40 */    40,   61,   58,   56,   54,   70,   51,   74,  168,   43,
        /*    50 */    69,   45,  175,   66,   71,   55,  101,   65,  105,  252,
        /*    60 */    38,   28,  160,   46,   39,   40,   61,   58,   56,   33,
        /*    70 */    34,   35,   60,   31,   31,   31,   31,   31,   31,   31,
        /*    80 */    36,   36,   36,   27,   27,   27,   25,   30,   67,   33,
        /*    90 */    34,   35,  204,   31,   31,   31,   31,   31,   31,   31,
        /*   100 */    36,   36,   36,   27,   27,   27,   25,   30,   54,   37,
        /*   110 */    51,   74,  146,   43,  369,   45,  175,   66,   71,  261,
        /*   120 */   101,   65,  373,   80,  167,   28,  153,   46,   39,   40,
        /*   130 */    61,   58,   56,  192,  258,  134,  220,  273,  273,  120,
        /*   140 */   273,   25,   30,  270,   54,  190,   51,   74,  183,   43,
        /*   150 */   203,   45,  175,   66,   71,  273,  101,   65,  246,  227,
        /*   160 */   177,   28,  249,   46,   39,   40,   61,   58,   56,  174,
        /*   170 */   273,   54,   63,   51,   74,  155,   43,  232,   45,  175,
        /*   180 */    66,   71,  208,  101,   65,  259,  115,  123,   28,  158,
        /*   190 */    46,   39,   40,   61,   58,   56,   33,   34,   35,  174,
        /*   200 */    31,   31,   31,   31,   31,   31,   31,   36,   36,   36,
        /*   210 */    27,   27,   27,   25,   30,  273,  273,  198,  273,  110,
        /*   220 */   238,  106,   54,   55,   51,   74,  169,   43,  263,   45,
        /*   230 */   175,   66,   71,  273,  101,   65,  205,  230,  228,   28,
        /*   240 */   165,   46,   39,   40,   61,   58,   56,  229,  273,   54,
        /*   250 */   238,   51,   74,  100,   43,  272,   45,  175,   66,   71,
        /*   260 */   102,  101,   65,  253,  262,  277,   28,   68,   46,   39,
        /*   270 */    40,   61,   58,   56,   54,   62,   51,   74,  150,   43,
        /*   280 */   122,   45,  175,   66,   71,  209,  101,   65,  103,  109,
        /*   290 */   104,   28,  119,   46,   39,   40,   61,   58,   56,   54,
        /*   300 */    57,   51,   74,  185,   43,  212,   45,  175,   66,   71,
        /*   310 */   118,  101,   65,   59,  254,  239,   28,  217,   46,   39,
        /*   320 */    40,   61,   58,   56,   54,   86,   51,   74,  151,   43,
        /*   330 */   201,   45,  175,   66,   71,  111,  101,   65,  206,  218,
        /*   340 */   224,   28,  207,   46,   39,   40,   61,   58,   56,   33,
        /*   350 */    34,   35,  116,   31,   31,   31,   31,   31,   31,   31,
        /*   360 */    36,   36,   36,   27,   27,   27,   25,   30,  200,   54,
        /*   370 */   176,   51,   74,  196,   43,   82,   45,  175,   66,   71,
        /*   380 */   275,  101,   65,  240,   95,   96,   28,   98,   46,   39,
        /*   390 */    40,   61,   58,   56,   54,   81,   51,   74,   64,   43,
        /*   400 */    97,   45,  175,   66,   71,   90,  101,   65,   88,   93,
        /*   410 */    89,   28,  235,   46,   39,   40,   61,   58,   56,   54,
        /*   420 */    99,   51,   74,  152,   43,   91,   45,  175,   66,   71,
        /*   430 */    83,  101,   65,   84,   87,   92,   28,   77,   46,   39,
        /*   440 */    40,   61,   58,   56,   54,   78,   51,   74,  172,   43,
        /*   450 */    94,   45,  175,   66,   71,   85,  101,   65,   79,  192,
        /*   460 */   192,   28,  192,   46,   39,   40,   61,   58,   56,   54,
        /*   470 */   192,   51,   74,  197,   43,  192,   45,  175,   66,   71,
        /*   480 */   192,  101,   65,  192,  192,  192,   28,  192,   46,   39,
        /*   490 */    40,   61,   58,   56,   54,  192,   51,   74,  173,   43,
        /*   500 */   192,   45,  175,   66,   71,  192,  101,   65,  192,  192,
        /*   510 */   192,   28,  192,   46,   39,   40,   61,   58,   56,   54,
        /*   520 */   192,   51,   74,  154,   43,  192,   45,  175,   66,   71,
        /*   530 */   192,  101,   65,  192,  192,  192,   28,  192,   46,   39,
        /*   540 */    40,   61,   58,   56,   54,  192,   51,   74,  179,   43,
        /*   550 */   192,   45,  175,   66,   71,  192,  101,   65,  192,  192,
        /*   560 */   192,   28,  192,   46,   39,   40,   61,   58,   56,   54,
        /*   570 */   192,   51,   74,  194,   43,  192,   45,  175,   66,   71,
        /*   580 */   192,  101,   65,  192,  192,  192,   28,  192,   46,   39,
        /*   590 */    40,   61,   58,   56,   54,  192,   51,   74,  187,   43,
        /*   600 */   192,   45,  175,   66,   71,  192,  101,   65,  192,  192,
        /*   610 */   192,   28,  192,   46,   39,   40,   61,   58,   56,   54,
        /*   620 */   192,   51,   74,  148,   43,  192,   45,  175,   66,   71,
        /*   630 */   192,  101,   65,  192,  192,  192,   28,  192,   46,   39,
        /*   640 */    40,   61,   58,   56,   54,  192,   51,   74,  170,   43,
        /*   650 */   192,   45,  175,   66,   71,  192,  101,   65,  192,  192,
        /*   660 */   192,   28,  192,   46,   39,   40,   61,   58,   56,   54,
        /*   670 */   192,   51,   74,  178,   43,  192,   45,  175,   66,   71,
        /*   680 */   192,  101,   65,  268,  134,  220,   28,  192,   46,   39,
        /*   690 */    40,   61,   58,   56,   34,   35,  192,   31,   31,   31,
        /*   700 */    31,   31,   31,   31,   36,   36,   36,   27,   27,   27,
        /*   710 */    25,   30,   35,  192,   31,   31,   31,   31,   31,   31,
        /*   720 */    31,   36,   36,   36,   27,   27,   27,   25,   30,   31,
        /*   730 */    31,   31,   31,   31,   31,   31,   36,   36,   36,   27,
        /*   740 */    27,   27,   25,   30,  174,  192,  226,   62,  273,  273,
        /*   750 */   192,  273,  192,  274,  192,  192,  257,  225,  174,  250,
        /*   760 */   273,  273,   73,  273,  192,  260,  273,  134,  220,  192,
        /*   770 */    52,  219,  192,   24,  273,  273,   72,  273,  273,  178,
        /*   780 */   192,  273,  256,  256,  251,  144,  174,  192,   62,  247,
        /*   790 */   134,  220,  273,  273,  121,  238,  256,  256,  251,  144,
        /*   800 */   192,  178,  273,  273,  163,  273,  143,  273,  192,  238,
        /*   810 */   192,  269,  134,  220,  174,  192,   62,  192,  273,  273,
        /*   820 */   273,  273,  216,  192,  266,  266,  251,  144,  192,   26,
        /*   830 */   273,  273,  192,  273,  192,  273,  273,  238,  192,  192,
        /*   840 */    52,  192,  251,  144,   17,  174,  192,  192,  273,  192,
        /*   850 */   192,  273,  256,  256,  251,  144,  237,  192,  114,  236,
        /*   860 */   192,  273,  273,  273,  273,  238,  214,  215,   29,  257,
        /*   870 */    49,   52,  250,  192,  174,  192,  192,  192,  260,  273,
        /*   880 */   134,  220,   19,  256,  256,  251,  144,  107,  236,  192,
        /*   890 */   273,  273,  192,  273,  273,  192,  238,  192,  257,   47,
        /*   900 */    52,  250,  192,  174,  214,  215,   29,  260,  273,  134,
        /*   910 */   220,  192,  256,  256,  251,  144,  113,  192,  192,  273,
        /*   920 */   273,  192,  273,  273,  137,  238,  192,  163,  142,  136,
        /*   930 */   141,  164,  174,  202,  269,  134,  220,  273,  192,  134,
        /*   940 */   220,  256,  256,  251,  144,  112,  236,  192,  273,  273,
        /*   950 */   192,  273,  273,  192,  238,  192,  257,   50,  192,  250,
        /*   960 */    27,   27,   27,   25,   30,  260,  273,  134,  220,  192,
        /*   970 */   256,  256,  251,  144,   44,   76,   76,   75,   53,  192,
        /*   980 */   192,  273,  192,  238,  199,  192,  174,  156,  245,  244,
        /*   990 */   242,  243,  233,  222,  223,  221,  131,  210,  276,    5,
        /*  1000 */   108,  192,  273,  273,  181,  273,  202,  178,  134,  220,
        /*  1010 */   166,  192,  191,  192,  174,  271,  267,  269,  134,  220,
        /*  1020 */   273,  214,  215,   29,  256,  256,  251,  144,  234,  192,
        /*  1030 */   273,  273,  210,  273,  192,  273,  192,  238,  188,  211,
        /*  1040 */   174,  202,  192,  134,  220,   11,  192,  192,  273,  134,
        /*  1050 */   220,  192,  256,  256,  251,  144,  273,  273,  192,  273,
        /*  1060 */   192,  192,  192,  273,  192,  238,  192,  214,  215,   29,
        /*  1070 */   192,  192,  178,  192,  273,  163,  126,  138,  266,  266,
        /*  1080 */   251,  144,  269,  134,  220,  192,  192,  178,  192,  273,
        /*  1090 */   166,  238,  191,  135,  192,  271,  267,  269,  134,  220,
        /*  1100 */   192,  192,  192,  192,  178,  192,  139,  166,  192,  191,
        /*  1110 */   192,  192,  271,  267,  269,  134,  220,  178,  192,  189,
        /*  1120 */   166,  124,  191,  192,  192,  271,  267,  269,  134,  220,
        /*  1130 */   134,  220,  178,  192,  157,  166,  125,  191,  192,  192,
        /*  1140 */   271,  267,  269,  134,  220,  134,  220,  178,  192,  127,
        /*  1150 */   166,  192,  191,  192,  192,  271,  267,  269,  134,  220,
        /*  1160 */   178,  192,  133,  166,  192,  191,  192,  192,  271,  267,
        /*  1170 */   269,  134,  220,  178,  192,  162,  166,  132,  191,  192,
        /*  1180 */   192,  271,  267,  269,  134,  220,  134,  220,  178,  192,
        /*  1190 */   130,  166,  192,  191,  192,  192,  271,  267,  269,  134,
        /*  1200 */   220,  178,  192,  192,  166,  264,  191,  192,  192,  271,
        /*  1210 */   267,  269,  134,  220,  174,  192,  178,  192,  192,  166,
        /*  1220 */   192,  191,  192,  128,  271,  267,  269,  134,  220,  147,
        /*  1230 */   273,  273,  192,  273,  178,    1,  192,  166,  192,  191,
        /*  1240 */   134,  220,  271,  267,  269,  134,  220,  192,  273,  192,
        /*  1250 */   265,  192,  192,  192,  251,  144,    3,  214,  215,   29,
        /*  1260 */     4,  178,  192,  273,  166,  238,  191,  192,  192,  271,
        /*  1270 */   267,  269,  134,  220,  129,  213,  192,  192,  214,  215,
        /*  1280 */    29,  192,  214,  215,   29,  178,  134,  220,  166,  192,
        /*  1290 */   191,  192,  192,  271,  267,  269,  134,  220,  178,  192,
        /*  1300 */   192,  166,  192,  191,  192,  192,   42,  267,  269,  134,
        /*  1310 */   220,  178,  192,  186,  166,  192,  191,  192,  192,  161,
        /*  1320 */   267,  269,  134,  220,  134,  220,  178,  192,  192,  166,
        /*  1330 */   192,  191,  192,  192,  149,  267,  269,  134,  220,  178,
        /*  1340 */   192,  192,  166,  236,  191,  192,  192,   41,  267,  269,
        /*  1350 */   134,  220,  192,  257,   48,  192,  250,  192,  192,  145,
        /*  1360 */   192,  192,  260,  192,  134,  220,  192,    6,  192,  257,
        /*  1370 */   192,  192,  250,  192,  192,  231,  192,  192,  260,  192,
        /*  1380 */   134,  220,  159,  192,  192,  257,  192,  184,  250,  214,
        /*  1390 */   215,   29,  257,  192,  260,  250,  134,  220,  134,  220,
        /*  1400 */   171,  260,  192,  134,  220,  178,  192,  192,  163,  248,
        /*  1410 */   140,  134,  220,  182,  192,  269,  134,  220,   22,  257,
        /*  1420 */   192,   16,  250,  257,   13,  192,  250,  180,  260,  192,
        /*  1430 */   134,  220,  260,    8,  134,  220,   21,  192,  134,  220,
        /*  1440 */   214,  215,   29,  214,  215,   29,  214,  215,   29,    7,
        /*  1450 */   192,  192,  192,  192,  192,  214,  215,   29,  214,  215,
        /*  1460 */    29,    9,  192,  192,  192,  192,  192,  192,  192,  192,
        /*  1470 */   192,  214,  215,   29,   15,  192,  192,  192,  192,  192,
        /*  1480 */   192,  192,  192,  214,  215,   29,    2,  192,  192,  192,
        /*  1490 */   192,  192,  192,  192,  192,  192,  214,  215,   29,   23,
        /*  1500 */   192,  192,  192,  192,  192,  192,  192,  192,  214,  215,
        /*  1510 */    29,   20,  192,  192,  192,  192,  192,  192,  192,  192,
        /*  1520 */   192,  214,  215,   29,   10,  192,  192,  192,  192,  192,
        /*  1530 */   192,  192,  192,  214,  215,   29,   18,  192,  192,  192,
        /*  1540 */   192,  192,  192,  192,  192,  192,  214,  215,   29,   12,
        /*  1550 */   192,  192,  192,  192,  192,  192,  192,  192,  214,  215,
        /*  1560 */    29,   14,  192,  192,  192,  192,  192,  192,  192,  192,
        /*  1570 */   192,  214,  215,   29,  192,  192,  192,  192,  192,  192,
        /*  1580 */   192,  192,  192,  214,  215,   29,
    ];

    static public $yyLookahead = [
        /*     0 */     3,    4,    5,    6,    7,    8,    9,   10,   11,   12,
        /*    10 */    13,   14,   15,   16,   17,   18,   19,   20,   21,   27,
        /*    20 */    22,   29,   30,   31,   32,   63,   34,   35,   36,   37,
        /*    30 */    28,   39,   40,   55,   56,   28,   44,   45,   46,   47,
        /*    40 */    48,   49,   50,   51,   27,   33,   29,   30,   31,   32,
        /*    50 */    52,   34,   35,   36,   37,    6,   39,   40,   28,   28,
        /*    60 */    13,   44,   45,   46,   47,   48,   49,   50,   51,    3,
        /*    70 */     4,    5,   42,    7,    8,    9,   10,   11,   12,   13,
        /*    80 */    14,   15,   16,   17,   18,   19,   20,   21,   41,    3,
        /*    90 */     4,    5,   26,    7,    8,    9,   10,   11,   12,   13,
        /*   100 */    14,   15,   16,   17,   18,   19,   20,   21,   27,   38,
        /*   110 */    29,   30,   31,   32,   65,   34,   35,   36,   37,   28,
        /*   120 */    39,   40,   68,   69,   83,   44,   45,   46,   47,   48,
        /*   130 */    49,   50,   51,   92,   28,   94,   95,   31,   32,   28,
        /*   140 */    34,   20,   21,   57,   27,   55,   29,   30,   31,   32,
        /*   150 */    28,   34,   35,   36,   37,   49,   39,   40,   28,   28,
        /*   160 */    43,   44,   28,   46,   47,   48,   49,   50,   51,   15,
        /*   170 */    64,   27,   22,   29,   30,   31,   32,   28,   34,   35,
        /*   180 */    36,   37,   28,   39,   40,   28,   28,   28,   44,   45,
        /*   190 */    46,   47,   48,   49,   50,   51,    3,    4,    5,   15,
        /*   200 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
        /*   210 */    17,   18,   19,   20,   21,   31,   32,   28,   34,   28,
        /*   220 */    66,   28,   27,    6,   29,   30,   31,   32,   28,   34,
        /*   230 */    35,   36,   37,   49,   39,   40,   28,   28,   28,   44,
        /*   240 */    45,   46,   47,   48,   49,   50,   51,   28,   64,   27,
        /*   250 */    66,   29,   30,   31,   32,   28,   34,   35,   36,   37,
        /*   260 */    28,   39,   40,   28,   57,   28,   44,   33,   46,   47,
        /*   270 */    48,   49,   50,   51,   27,   22,   29,   30,   31,   32,
        /*   280 */    28,   34,   35,   36,   37,   28,   39,   40,   28,   28,
        /*   290 */    28,   44,   28,   46,   47,   48,   49,   50,   51,   27,
        /*   300 */    13,   29,   30,   31,   32,   28,   34,   35,   36,   37,
        /*   310 */    28,   39,   40,   65,   28,   66,   44,   28,   46,   47,
        /*   320 */    48,   49,   50,   51,   27,   69,   29,   30,   31,   32,
        /*   330 */    28,   34,   35,   36,   37,   28,   39,   40,   28,   28,
        /*   340 */    28,   44,   28,   46,   47,   48,   49,   50,   51,    3,
        /*   350 */     4,    5,   28,    7,    8,    9,   10,   11,   12,   13,
        /*   360 */    14,   15,   16,   17,   18,   19,   20,   21,   70,   27,
        /*   370 */    92,   29,   30,   31,   32,   69,   34,   35,   36,   37,
        /*   380 */    86,   39,   40,   95,   69,   69,   44,   69,   46,   47,
        /*   390 */    48,   49,   50,   51,   27,   69,   29,   30,   31,   32,
        /*   400 */    69,   34,   35,   36,   37,   69,   39,   40,   69,   69,
        /*   410 */    69,   44,   95,   46,   47,   48,   49,   50,   51,   27,
        /*   420 */    69,   29,   30,   31,   32,   69,   34,   35,   36,   37,
        /*   430 */    69,   39,   40,   69,   69,   69,   44,   69,   46,   47,
        /*   440 */    48,   49,   50,   51,   27,   69,   29,   30,   31,   32,
        /*   450 */    69,   34,   35,   36,   37,   69,   39,   40,   69,   96,
        /*   460 */    96,   44,   96,   46,   47,   48,   49,   50,   51,   27,
        /*   470 */    96,   29,   30,   31,   32,   96,   34,   35,   36,   37,
        /*   480 */    96,   39,   40,   96,   96,   96,   44,   96,   46,   47,
        /*   490 */    48,   49,   50,   51,   27,   96,   29,   30,   31,   32,
        /*   500 */    96,   34,   35,   36,   37,   96,   39,   40,   96,   96,
        /*   510 */    96,   44,   96,   46,   47,   48,   49,   50,   51,   27,
        /*   520 */    96,   29,   30,   31,   32,   96,   34,   35,   36,   37,
        /*   530 */    96,   39,   40,   96,   96,   96,   44,   96,   46,   47,
        /*   540 */    48,   49,   50,   51,   27,   96,   29,   30,   31,   32,
        /*   550 */    96,   34,   35,   36,   37,   96,   39,   40,   96,   96,
        /*   560 */    96,   44,   96,   46,   47,   48,   49,   50,   51,   27,
        /*   570 */    96,   29,   30,   31,   32,   96,   34,   35,   36,   37,
        /*   580 */    96,   39,   40,   96,   96,   96,   44,   96,   46,   47,
        /*   590 */    48,   49,   50,   51,   27,   96,   29,   30,   31,   32,
        /*   600 */    96,   34,   35,   36,   37,   96,   39,   40,   96,   96,
        /*   610 */    96,   44,   96,   46,   47,   48,   49,   50,   51,   27,
        /*   620 */    96,   29,   30,   31,   32,   96,   34,   35,   36,   37,
        /*   630 */    96,   39,   40,   96,   96,   96,   44,   96,   46,   47,
        /*   640 */    48,   49,   50,   51,   27,   96,   29,   30,   31,   32,
        /*   650 */    96,   34,   35,   36,   37,   96,   39,   40,   96,   96,
        /*   660 */    96,   44,   96,   46,   47,   48,   49,   50,   51,   27,
        /*   670 */    96,   29,   30,   83,   32,   96,   34,   35,   36,   37,
        /*   680 */    96,   39,   40,   93,   94,   95,   44,   96,   46,   47,
        /*   690 */    48,   49,   50,   51,    4,    5,   96,    7,    8,    9,
        /*   700 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
        /*   710 */    20,   21,    5,   96,    7,    8,    9,   10,   11,   12,
        /*   720 */    13,   14,   15,   16,   17,   18,   19,   20,   21,    7,
        /*   730 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
        /*   740 */    18,   19,   20,   21,   15,   96,   73,   22,   31,   32,
        /*   750 */    96,   34,   96,   28,   96,   96,   83,   28,   15,   86,
        /*   760 */    31,   32,   33,   34,   96,   92,   49,   94,   95,   96,
        /*   770 */    41,   28,   96,    2,   31,   32,   33,   34,   49,   83,
        /*   780 */    96,   64,   53,   54,   55,   56,   15,   96,   22,   93,
        /*   790 */    94,   95,   49,   64,   28,   66,   53,   54,   55,   56,
        /*   800 */    96,   83,   31,   32,   86,   34,   88,   64,   96,   66,
        /*   810 */    96,   93,   94,   95,   15,   96,   22,   96,   31,   32,
        /*   820 */    49,   34,   28,   96,   53,   54,   55,   56,   96,   58,
        /*   830 */    31,   32,   96,   34,   96,   64,   49,   66,   96,   96,
        /*   840 */    41,   96,   55,   56,    1,   15,   96,   96,   49,   96,
        /*   850 */    96,   64,   53,   54,   55,   56,   57,   96,   28,   73,
        /*   860 */    96,   31,   32,   64,   34,   66,   23,   24,   25,   83,
        /*   870 */    84,   41,   86,   96,   15,   96,   96,   96,   92,   49,
        /*   880 */    94,   95,    1,   53,   54,   55,   56,   28,   73,   96,
        /*   890 */    31,   32,   96,   34,   64,   96,   66,   96,   83,   84,
        /*   900 */    41,   86,   96,   15,   23,   24,   25,   92,   49,   94,
        /*   910 */    95,   96,   53,   54,   55,   56,   28,   96,   96,   31,
        /*   920 */    32,   96,   34,   64,   83,   66,   96,   86,   83,   88,
        /*   930 */    89,   90,   15,   92,   93,   94,   95,   49,   96,   94,
        /*   940 */    95,   53,   54,   55,   56,   28,   73,   96,   31,   32,
        /*   950 */    96,   34,   64,   96,   66,   96,   83,   84,   96,   86,
        /*   960 */    17,   18,   19,   20,   21,   92,   49,   94,   95,   96,
        /*   970 */    53,   54,   55,   56,   58,   59,   60,   61,   62,   96,
        /*   980 */    96,   64,   96,   66,   71,   96,   15,   74,   75,   76,
        /*   990 */    77,   78,   79,   80,   81,   82,   72,   83,   85,    1,
        /*  1000 */    87,   96,   31,   32,   90,   34,   92,   83,   94,   95,
        /*  1010 */    86,   96,   88,   96,   15,   91,   92,   93,   94,   95,
        /*  1020 */    49,   23,   24,   25,   53,   54,   55,   56,   57,   96,
        /*  1030 */    31,   32,   83,   34,   96,   64,   96,   66,   83,   90,
        /*  1040 */    15,   92,   96,   94,   95,    1,   96,   96,   49,   94,
        /*  1050 */    95,   96,   53,   54,   55,   56,   31,   32,   96,   34,
        /*  1060 */    96,   96,   96,   64,   96,   66,   96,   23,   24,   25,
        /*  1070 */    96,   96,   83,   96,   49,   86,   72,   88,   53,   54,
        /*  1080 */    55,   56,   93,   94,   95,   96,   96,   83,   96,   64,
        /*  1090 */    86,   66,   88,   72,   96,   91,   92,   93,   94,   95,
        /*  1100 */    96,   96,   96,   96,   83,   96,   72,   86,   96,   88,
        /*  1110 */    96,   96,   91,   92,   93,   94,   95,   83,   96,   83,
        /*  1120 */    86,   72,   88,   96,   96,   91,   92,   93,   94,   95,
        /*  1130 */    94,   95,   83,   96,   83,   86,   72,   88,   96,   96,
        /*  1140 */    91,   92,   93,   94,   95,   94,   95,   83,   96,   72,
        /*  1150 */    86,   96,   88,   96,   96,   91,   92,   93,   94,   95,
        /*  1160 */    83,   96,   72,   86,   96,   88,   96,   96,   91,   92,
        /*  1170 */    93,   94,   95,   83,   96,   83,   86,   72,   88,   96,
        /*  1180 */    96,   91,   92,   93,   94,   95,   94,   95,   83,   96,
        /*  1190 */    72,   86,   96,   88,   96,   96,   91,   92,   93,   94,
        /*  1200 */    95,   83,   96,   96,   86,   72,   88,   96,   96,   91,
        /*  1210 */    92,   93,   94,   95,   15,   96,   83,   96,   96,   86,
        /*  1220 */    96,   88,   96,   72,   91,   92,   93,   94,   95,   83,
        /*  1230 */    31,   32,   96,   34,   83,    1,   96,   86,   96,   88,
        /*  1240 */    94,   95,   91,   92,   93,   94,   95,   96,   49,   96,
        /*  1250 */    72,   96,   96,   96,   55,   56,    1,   23,   24,   25,
        /*  1260 */     1,   83,   96,   64,   86,   66,   88,   96,   96,   91,
        /*  1270 */    92,   93,   94,   95,   72,   83,   96,   96,   23,   24,
        /*  1280 */    25,   96,   23,   24,   25,   83,   94,   95,   86,   96,
        /*  1290 */    88,   96,   96,   91,   92,   93,   94,   95,   83,   96,
        /*  1300 */    96,   86,   96,   88,   96,   96,   91,   92,   93,   94,
        /*  1310 */    95,   83,   96,   83,   86,   96,   88,   96,   96,   91,
        /*  1320 */    92,   93,   94,   95,   94,   95,   83,   96,   96,   86,
        /*  1330 */    96,   88,   96,   96,   91,   92,   93,   94,   95,   83,
        /*  1340 */    96,   96,   86,   73,   88,   96,   96,   91,   92,   93,
        /*  1350 */    94,   95,   96,   83,   84,   96,   86,   96,   96,   73,
        /*  1360 */    96,   96,   92,   96,   94,   95,   96,    1,   96,   83,
        /*  1370 */    96,   96,   86,   96,   96,   73,   96,   96,   92,   96,
        /*  1380 */    94,   95,   73,   96,   96,   83,   96,   83,   86,   23,
        /*  1390 */    24,   25,   83,   96,   92,   86,   94,   95,   94,   95,
        /*  1400 */    83,   92,   96,   94,   95,   83,   96,   96,   86,   73,
        /*  1410 */    88,   94,   95,   73,   96,   93,   94,   95,    1,   83,
        /*  1420 */    96,    1,   86,   83,    1,   96,   86,   83,   92,   96,
        /*  1430 */    94,   95,   92,    1,   94,   95,    1,   96,   94,   95,
        /*  1440 */    23,   24,   25,   23,   24,   25,   23,   24,   25,    1,
        /*  1450 */    96,   96,   96,   96,   96,   23,   24,   25,   23,   24,
        /*  1460 */    25,    1,   96,   96,   96,   96,   96,   96,   96,   96,
        /*  1470 */    96,   23,   24,   25,    1,   96,   96,   96,   96,   96,
        /*  1480 */    96,   96,   96,   23,   24,   25,    1,   96,   96,   96,
        /*  1490 */    96,   96,   96,   96,   96,   96,   23,   24,   25,    1,
        /*  1500 */    96,   96,   96,   96,   96,   96,   96,   96,   23,   24,
        /*  1510 */    25,    1,   96,   96,   96,   96,   96,   96,   96,   96,
        /*  1520 */    96,   23,   24,   25,    1,   96,   96,   96,   96,   96,
        /*  1530 */    96,   96,   96,   23,   24,   25,    1,   96,   96,   96,
        /*  1540 */    96,   96,   96,   96,   96,   96,   23,   24,   25,    1,
        /*  1550 */    96,   96,   96,   96,   96,   96,   96,   96,   23,   24,
        /*  1560 */    25,    1,   96,   96,   96,   96,   96,   96,   96,   96,
        /*  1570 */    96,   23,   24,   25,   96,   96,   96,   96,   96,   96,
        /*  1580 */    96,   96,   96,   23,   24,   25,
	];

    const YY_SHIFT_USE_DFLT = -39;
    const YY_SHIFT_MAX      = 197;

    static public $yyShiftOfst = [
        /*     0 */   -39,  144,  195,   81,   -8,  117,   17,  542,  517,  592,
        /*    10 */   567,  617,  392,  492,  297,  272,  247,  222,  342,  442,
        /*    20 */   367,  467,  417,  642,  771,  771,  771,  771,  771,  771,
        /*    30 */   771,  771,  771,  771,  771,  771,  771,  771, 1199, 1025,
        /*    40 */  1025, 1025, 1025,  743,  971,  917,  888,  729,  830,  799,
        /*    50 */   859,  999,  999,  999,  999,  999,  787,  787,  787,  184,
        /*    60 */   184,  184,  717,  717,  106,  717,  717,  717,  717,  717,
        /*    70 */   717,  717,  717,  717,  717,  717,  717, 1535, 1560, 1510,
        /*    80 */  1498, 1485, 1523, 1548, 1423, 1255, 1259, 1234, 1417,  998,
        /*    90 */  1044,  843,  881, 1366, 1460, 1435, 1448, 1473, 1432, 1420,
        /*   100 */   154,  -22,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
        /*   110 */   -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
        /*   120 */   -39,  -39,  -39,  -39,   86,   -3,  193,   66,  346,  346,
        /*   130 */   690,  707,  722,  722,  916,  943,  725,   49,  766,  121,
        /*   140 */   794,   30,   47,   -2,   90,  149,  134,   71,  131,  158,
        /*   150 */   189,  122,   31,    7,    2,   91,  130,   12,  111,  -38,
        /*   160 */   159,  324,  287,  150,  248,  282,  150,  264,  277,  286,
        /*   170 */   289,  312,  314,  311,  249,  307,  310,  261,  217,  219,
        /*   180 */   209,  191,  208,  227,  252,  257,  237,  235,  234,  262,
        /*   190 */   207,  253,  232,  200,  210,  260,  302,  157,
	];

    const YY_REDUCE_USE_DFLT = -1;
    const YY_REDUCE_MAX      = 123;

    static public $yyReduceOfst = [
        /*     0 */    54,  913,  913,  913,  913,  913,  913,  913,  913,  913,
        /*    10 */   913,  913,  913,  913,  913,  913,  913,  913,  913,  913,
        /*    20 */   913,  913,  913,  913, 1202, 1178, 1049, 1034, 1004, 1077,
        /*    30 */  1133, 1105, 1090, 1118,  924, 1064, 1021, 1151,  841, 1256,
        /*    40 */  1215, 1243, 1228,  815,  786, 1270,  873,  673,  673,  673,
        /*    50 */   673, 1286, 1302, 1309, 1340, 1336,  718, 1322,  989,  949,
        /*    60 */   914,   41,  696,  590, 1230,  845,  955, 1092, 1304, 1051,
        /*    70 */  1192, 1146, 1317, 1344, 1036,  288,  317,  298,  298,  298,
        /*    80 */   298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
        /*    90 */   298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
        /*   100 */   278,  294,  356,  306,  315,  339,  256,  340,  341,  336,
        /*   110 */   331,  316,  318,  326,  351,  386,  365,  364,  361,  389,
        /*   120 */   366,  368,  381,  376,
	];

    static public $yyExpectedTokens = [
        /* 0 */ [],
        /* 1 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, ],
        /* 2 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, ],
        /* 3 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, ],
        /* 4 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, ],
        /* 5 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 43, 44, 46, 47, 48, 49, 50, 51, ],
        /* 6 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 45, 46, 47, 48, 49, 50, 51, ],
        /* 7 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 8 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 9 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 10 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 11 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 12 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 13 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 14 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 15 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 16 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 17 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 18 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 19 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 20 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 21 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 22 */ [27, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 23 */ [27, 29, 30, 32, 34, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 50, 51, ],
        /* 24 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 25 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 26 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 27 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 28 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 29 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 30 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 31 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 32 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 33 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 34 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 35 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 36 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 37 */ [2, 15, 31, 32, 34, 49, 53, 54, 55, 56, 58, 64, 66, ],
        /* 38 */ [15, 31, 32, 34, 49, 55, 56, 64, 66, ],
        /* 39 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 40 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 41 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 42 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 43 */ [15, 28, 31, 32, 33, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 44 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 57, 64, 66, ],
        /* 45 */ [15, 28, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 46 */ [15, 28, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 47 */ [15, 28, 31, 32, 33, 34, 41, 49, 53, 54, 55, 56, 64, 66, ],
        /* 48 */ [15, 28, 31, 32, 34, 41, 49, 53, 54, 55, 56, 64, 66, ],
        /* 49 */ [15, 31, 32, 34, 41, 49, 53, 54, 55, 56, 57, 64, 66, ],
        /* 50 */ [15, 28, 31, 32, 34, 41, 49, 53, 54, 55, 56, 64, 66, ],
        /* 51 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 52 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 53 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 54 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 55 */ [15, 31, 32, 34, 49, 53, 54, 55, 56, 64, 66, ],
        /* 56 */ [31, 32, 34, 49, 55, 56, 64, ],
        /* 57 */ [31, 32, 34, 49, 55, 56, 64, ],
        /* 58 */ [31, 32, 34, 49, 55, 56, 64, ],
        /* 59 */ [15, 31, 32, 34, 49, 64, 66, ],
        /* 60 */ [15, 31, 32, 34, 49, 64, 66, ],
        /* 61 */ [15, 31, 32, 34, 49, 64, 66, ],
        /* 62 */ [31, 32, 34, 49, 64, ],
        /* 63 */ [31, 32, 34, 49, 64, ],
        /* 64 */ [28, 31, 32, 34, 49, 64, ],
        /* 65 */ [31, 32, 34, 49, 64, ],
        /* 66 */ [31, 32, 34, 49, 64, ],
        /* 67 */ [31, 32, 34, 49, 64, ],
        /* 68 */ [31, 32, 34, 49, 64, ],
        /* 69 */ [31, 32, 34, 49, 64, ],
        /* 70 */ [31, 32, 34, 49, 64, ],
        /* 71 */ [31, 32, 34, 49, 64, ],
        /* 72 */ [31, 32, 34, 49, 64, ],
        /* 73 */ [31, 32, 34, 49, 64, ],
        /* 74 */ [31, 32, 34, 49, 64, ],
        /* 75 */ [31, 32, 34, 49, 64, ],
        /* 76 */ [31, 32, 34, 49, 64, ],
        /* 77 */ [1, 23, 24, 25, ],
        /* 78 */ [1, 23, 24, 25, ],
        /* 79 */ [1, 23, 24, 25, ],
        /* 80 */ [1, 23, 24, 25, ],
        /* 81 */ [1, 23, 24, 25, ],
        /* 82 */ [1, 23, 24, 25, ],
        /* 83 */ [1, 23, 24, 25, ],
        /* 84 */ [1, 23, 24, 25, ],
        /* 85 */ [1, 23, 24, 25, ],
        /* 86 */ [1, 23, 24, 25, ],
        /* 87 */ [1, 23, 24, 25, ],
        /* 88 */ [1, 23, 24, 25, ],
        /* 89 */ [1, 23, 24, 25, ],
        /* 90 */ [1, 23, 24, 25, ],
        /* 91 */ [1, 23, 24, 25, ],
        /* 92 */ [1, 23, 24, 25, ],
        /* 93 */ [1, 23, 24, 25, ],
        /* 94 */ [1, 23, 24, 25, ],
        /* 95 */ [1, 23, 24, 25, ],
        /* 96 */ [1, 23, 24, 25, ],
        /* 97 */ [1, 23, 24, 25, ],
        /* 98 */ [1, 23, 24, 25, ],
        /* 99 */ [1, 23, 24, 25, ],
        /* 100 */ [15, 28, 66, ],
        /* 101 */ [55, 56, ],
        /* 102 */ [],
        /* 103 */ [],
        /* 104 */ [],
        /* 105 */ [],
        /* 106 */ [],
        /* 107 */ [],
        /* 108 */ [],
        /* 109 */ [],
        /* 110 */ [],
        /* 111 */ [],
        /* 112 */ [],
        /* 113 */ [],
        /* 114 */ [],
        /* 115 */ [],
        /* 116 */ [],
        /* 117 */ [],
        /* 118 */ [],
        /* 119 */ [],
        /* 120 */ [],
        /* 121 */ [],
        /* 122 */ [],
        /* 123 */ [],
        /* 124 */ [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 57, ],
        /* 125 */ [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 126 */ [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, ],
        /* 127 */ [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, ],
        /* 128 */ [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 129 */ [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 130 */ [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 131 */ [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 132 */ [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 133 */ [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ],
        /* 134 */ [58, 59, 60, 61, 62, ],
        /* 135 */ [17, 18, 19, 20, 21, ],
        /* 136 */ [22, 28, ],
        /* 137 */ [6, 65, ],
        /* 138 */ [22, 28, ],
        /* 139 */ [20, 21, ],
        /* 140 */ [22, 28, ],
        /* 141 */ [28, 42, ],
        /* 142 */ [13, 41, ],
        /* 143 */ [22, 52, ],
        /* 144 */ [55, ],
        /* 145 */ [28, ],
        /* 146 */ [28, ],
        /* 147 */ [38, ],
        /* 148 */ [28, ],
        /* 149 */ [28, ],
        /* 150 */ [28, ],
        /* 151 */ [28, ],
        /* 152 */ [28, ],
        /* 153 */ [28, ],
        /* 154 */ [28, ],
        /* 155 */ [28, ],
        /* 156 */ [28, ],
        /* 157 */ [33, ],
        /* 158 */ [28, ],
        /* 159 */ [63, ],
        /* 160 */ [28, ],
        /* 161 */ [28, ],
        /* 162 */ [13, ],
        /* 163 */ [22, ],
        /* 164 */ [65, ],
        /* 165 */ [28, ],
        /* 166 */ [22, ],
        /* 167 */ [28, ],
        /* 168 */ [28, ],
        /* 169 */ [28, ],
        /* 170 */ [28, ],
        /* 171 */ [28, ],
        /* 172 */ [28, ],
        /* 173 */ [28, ],
        /* 174 */ [66, ],
        /* 175 */ [28, ],
        /* 176 */ [28, ],
        /* 177 */ [28, ],
        /* 178 */ [6, ],
        /* 179 */ [28, ],
        /* 180 */ [28, ],
        /* 181 */ [28, ],
        /* 182 */ [28, ],
        /* 183 */ [28, ],
        /* 184 */ [28, ],
        /* 185 */ [28, ],
        /* 186 */ [28, ],
        /* 187 */ [28, ],
        /* 188 */ [33, ],
        /* 189 */ [28, ],
        /* 190 */ [57, ],
        /* 191 */ [22, ],
        /* 192 */ [28, ],
        /* 193 */ [28, ],
        /* 194 */ [28, ],
        /* 195 */ [28, ],
        /* 196 */ [28, ],
        /* 197 */ [28, ],
        /* 198 */ [],
        /* 199 */ [],
        /* 200 */ [],
        /* 201 */ [],
        /* 202 */ [],
        /* 203 */ [],
        /* 204 */ [],
        /* 205 */ [],
        /* 206 */ [],
        /* 207 */ [],
        /* 208 */ [],
        /* 209 */ [],
        /* 210 */ [],
        /* 211 */ [],
        /* 212 */ [],
        /* 213 */ [],
        /* 214 */ [],
        /* 215 */ [],
        /* 216 */ [],
        /* 217 */ [],
        /* 218 */ [],
        /* 219 */ [],
        /* 220 */ [],
        /* 221 */ [],
        /* 222 */ [],
        /* 223 */ [],
        /* 224 */ [],
        /* 225 */ [],
        /* 226 */ [],
        /* 227 */ [],
        /* 228 */ [],
        /* 229 */ [],
        /* 230 */ [],
        /* 231 */ [],
        /* 232 */ [],
        /* 233 */ [],
        /* 234 */ [],
        /* 235 */ [],
        /* 236 */ [],
        /* 237 */ [],
        /* 238 */ [],
        /* 239 */ [],
        /* 240 */ [],
        /* 241 */ [],
        /* 242 */ [],
        /* 243 */ [],
        /* 244 */ [],
        /* 245 */ [],
        /* 246 */ [],
        /* 247 */ [],
        /* 248 */ [],
        /* 249 */ [],
        /* 250 */ [],
        /* 251 */ [],
        /* 252 */ [],
        /* 253 */ [],
        /* 254 */ [],
        /* 255 */ [],
        /* 256 */ [],
        /* 257 */ [],
        /* 258 */ [],
        /* 259 */ [],
        /* 260 */ [],
        /* 261 */ [],
        /* 262 */ [],
        /* 263 */ [],
        /* 264 */ [],
        /* 265 */ [],
        /* 266 */ [],
        /* 267 */ [],
        /* 268 */ [],
        /* 269 */ [],
        /* 270 */ [],
        /* 271 */ [],
        /* 272 */ [],
        /* 273 */ [],
        /* 274 */ [],
        /* 275 */ [],
        /* 276 */ [],
        /* 277 */ [],
	];
    static public $yyDefault = [
        /*     0 */   280,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    10 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    20 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    30 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    40 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    50 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    60 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    70 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    80 */   278,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*    90 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*   100 */   372,  372,  280,  280,  280,  280,  280,  280,  280,  280,
        /*   110 */   280,  280,  280,  280,  280,  280,  280,  280,  280,  280,
        /*   120 */   280,  280,  280,  280,  372,  372,  372,  372,  305,  349,
        /*   130 */   350,  351,  353,  348,  361,  352,  372,  334,  372,  354,
        /*   140 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*   150 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*   160 */   372,  372,  372,  372,  372,  372,  345,  372,  372,  372,
        /*   170 */   372,  372,  372,  372,  372,  372,  372,  372,  334,  372,
        /*   180 */   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
        /*   190 */   372,  342,  372,  372,  372,  372,  372,  372,  302,  281,
        /*   200 */   279,  328,  368,  319,  284,  285,  327,  311,  326,  312,
        /*   210 */   369,  367,  317,  329,  282,  283,  309,  313,  296,  297,
        /*   220 */   365,  295,  293,  294,  298,  299,  335,  304,  303,  301,
        /*   230 */   300,  336,  292,  291,  359,  362,  337,  360,  370,  371,
        /*   240 */   363,  364,  289,  290,  288,  287,  286,  330,  333,  320,
        /*   250 */   341,  346,  318,  315,  316,  321,  340,  338,  324,  323,
        /*   260 */   339,  322,  347,  314,  355,  356,  344,  343,  331,  332,
        /*   270 */   357,  358,  310,  366,  308,  307,  306,  325,
	];

    const YYNOCODE      = 97;
    const YYSTACKDEPTH  = 100;
    const YYNSTATE      = 278;
    const YYNRULE       = 94;
    const YYERRORSYMBOL = 67;
    const YYERRSYMDT    = 'yy0';
    const YYFALLBACK    = 0;

    static public $yyFallback = [];
    static public $yyTraceFile;
    static public $yyTracePrompt;

    /**
     * Index of top element in stack
     *
     * @var integer
     */
    public $yyidx = -1;

    /**
     * Shifts left before out of the error
     *
     * @var int
     */
    public $yyerrcnt;

    /**
     * The parser's stack
     *
     * @var array
     */
    public $yystack = [];

    static public $yyRuleInfo = [
        [ 'lhs' => 68, 'rhs' => 1 ],
        [ 'lhs' => 69, 'rhs' => 2 ],
        [ 'lhs' => 69, 'rhs' => 0 ],
        [ 'lhs' => 70, 'rhs' => 2 ],
        [ 'lhs' => 70, 'rhs' => 1 ],
        [ 'lhs' => 70, 'rhs' => 1 ],
        [ 'lhs' => 70, 'rhs' => 3 ],
        [ 'lhs' => 71, 'rhs' => 3 ],
        [ 'lhs' => 71, 'rhs' => 2 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 3 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 1 ],
        [ 'lhs' => 71, 'rhs' => 7 ],
        [ 'lhs' => 80, 'rhs' => 2 ],
        [ 'lhs' => 80, 'rhs' => 4 ],
        [ 'lhs' => 80, 'rhs' => 3 ],
        [ 'lhs' => 80, 'rhs' => 5 ],
        [ 'lhs' => 80, 'rhs' => 6 ],
        [ 'lhs' => 80, 'rhs' => 7 ],
        [ 'lhs' => 80, 'rhs' => 6 ],
        [ 'lhs' => 81, 'rhs' => 9 ],
        [ 'lhs' => 74, 'rhs' => 4 ],
        [ 'lhs' => 74, 'rhs' => 1 ],
        [ 'lhs' => 74, 'rhs' => 2 ],
        [ 'lhs' => 87, 'rhs' => 5 ],
        [ 'lhs' => 87, 'rhs' => 7 ],
        [ 'lhs' => 75, 'rhs' => 5 ],
        [ 'lhs' => 75, 'rhs' => 9 ],
        [ 'lhs' => 75, 'rhs' => 11 ],
        [ 'lhs' => 75, 'rhs' => 9 ],
        [ 'lhs' => 79, 'rhs' => 7 ],
        [ 'lhs' => 79, 'rhs' => 11 ],
        [ 'lhs' => 76, 'rhs' => 6 ],
        [ 'lhs' => 76, 'rhs' => 7 ],
        [ 'lhs' => 76, 'rhs' => 10 ],
        [ 'lhs' => 76, 'rhs' => 11 ],
        [ 'lhs' => 82, 'rhs' => 8 ],
        [ 'lhs' => 82, 'rhs' => 12 ],
        [ 'lhs' => 82, 'rhs' => 8 ],
        [ 'lhs' => 82, 'rhs' => 12 ],
        [ 'lhs' => 77, 'rhs' => 7 ],
        [ 'lhs' => 77, 'rhs' => 8 ],
        [ 'lhs' => 77, 'rhs' => 7 ],
        [ 'lhs' => 77, 'rhs' => 8 ],
        [ 'lhs' => 78, 'rhs' => 7 ],
        [ 'lhs' => 85, 'rhs' => 6 ],
        [ 'lhs' => 88, 'rhs' => 3 ],
        [ 'lhs' => 88, 'rhs' => 3 ],
        [ 'lhs' => 88, 'rhs' => 1 ],
        [ 'lhs' => 93, 'rhs' => 3 ],
        [ 'lhs' => 93, 'rhs' => 1 ],
        [ 'lhs' => 84, 'rhs' => 2 ],
        [ 'lhs' => 84, 'rhs' => 3 ],
        [ 'lhs' => 84, 'rhs' => 1 ],
        [ 'lhs' => 73, 'rhs' => 1 ],
        [ 'lhs' => 73, 'rhs' => 1 ],
        [ 'lhs' => 73, 'rhs' => 1 ],
        [ 'lhs' => 73, 'rhs' => 1 ],
        [ 'lhs' => 91, 'rhs' => 1 ],
        [ 'lhs' => 91, 'rhs' => 1 ],
        [ 'lhs' => 91, 'rhs' => 1 ],
        [ 'lhs' => 91, 'rhs' => 1 ],
        [ 'lhs' => 86, 'rhs' => 1 ],
        [ 'lhs' => 86, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 5 ],
        [ 'lhs' => 72, 'rhs' => 2 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 3 ],
        [ 'lhs' => 72, 'rhs' => 1 ],
        [ 'lhs' => 83, 'rhs' => 3 ],
        [ 'lhs' => 83, 'rhs' => 4 ],
        [ 'lhs' => 83, 'rhs' => 1 ],
        [ 'lhs' => 94, 'rhs' => 3 ],
        [ 'lhs' => 94, 'rhs' => 3 ],
        [ 'lhs' => 94, 'rhs' => 4 ],
        [ 'lhs' => 94, 'rhs' => 1 ],
        [ 'lhs' => 95, 'rhs' => 1 ],
        [ 'lhs' => 89, 'rhs' => 3 ],
        [ 'lhs' => 90, 'rhs' => 1 ],
        [ 'lhs' => 90, 'rhs' => 1 ],
        [ 'lhs' => 92, 'rhs' => 1 ],
        [ 'lhs' => 92, 'rhs' => 2 ],
    ];

    static public $yyReduceMap = [
        0 => 0,
        1 => 1,
        2 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        69 => 8,
        9 => 9,
        10 => 9,
        11 => 9,
        12 => 9,
        13 => 9,
        15 => 9,
        16 => 9,
        17 => 9,
        28 => 9,
        56 => 9,
        68 => 9,
        80 => 9,
        87 => 9,
        88 => 9,
        90 => 9,
        92 => 9,
        14 => 14,
        18 => 18,
        19 => 19,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        36 => 36,
        37 => 37,
        38 => 38,
        39 => 39,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        45 => 45,
        46 => 46,
        47 => 47,
        49 => 47,
        48 => 48,
        50 => 50,
        51 => 51,
        52 => 52,
        58 => 52,
        53 => 53,
        54 => 54,
        59 => 54,
        55 => 55,
        57 => 57,
        60 => 60,
        91 => 60,
        61 => 61,
        65 => 61,
        62 => 62,
        66 => 62,
        63 => 63,
        67 => 63,
        64 => 64,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 72,
        74 => 72,
        76 => 72,
        75 => 75,
        77 => 77,
        78 => 78,
        79 => 79,
        81 => 81,
        82 => 82,
        83 => 83,
        84 => 84,
        85 => 85,
        86 => 86,
        89 => 89,
        93 => 93,
    ];

    static public $yyTokenName = [
		'$',             'T_TAG_OPEN',    'T_NOT',         'T_AND',
		'T_OR',          'T_QUESTION',    'T_COLON',       'T_EQ',
		'T_NE',          'T_GT',          'T_GE',          'T_LT',
		'T_LE',          'T_IN',          'T_PLUS',        'T_MINUS',
		'T_CONCAT',      'T_TIMES',       'T_DIV',         'T_MOD',
		'T_PIPE',        'T_BITWISE',     'T_FILTER_PIPE',  'T_HTML',
		'T_COMMENT',     'T_PRINT_OPEN',  'T_PRINT_CLOSE',  'T_EXTENDS',
		'T_TAG_CLOSE',   'T_INCLUDE',     'T_AUTOESCAPE',  'T_CUSTOM_END',
		'T_CUSTOM_TAG',  'T_AS',          'T_CUSTOM_BLOCK',  'T_SPACEFULL',
		'T_WITH',        'T_SET',         'T_ASSIGN',      'T_LOAD',
		'T_FOR',         'T_COMMA',       'T_STEP',        'T_EMPTY',
		'T_IF',          'T_ELSE',        'T_IFCHANGED',   'T_IFEQUAL',
		'T_IFNOTEQUAL',  'T_BLOCK',       'T_FILTER',      'T_REGROUP',
		'T_BY',          'T_TRUE',        'T_FALSE',       'T_STRING',
		'T_INTL',        'T_RPARENT',     'T_LPARENT',     'T_OBJ',
		'T_DOT',         'T_CLASS',       'T_BRACKETS_OPEN',  'T_BRACKETS_CLOSE',
		'T_ALPHA',       'T_DOTDOT',      'T_NUMERIC',     'error',
		'start',         'body',          'code',          'stmts',
		'expr',          'var_or_string',  'stmt',          'for_stmt',
		'ifchanged_stmt',  'block_stmt',    'filter_stmt',   'if_stmt',
		'custom_tag',    'alias',         'ifequal',       'varname',
		'params',        'regroup',       'string',        'for_def',
		'filtered_var',  'range',         'numvar',        'fvar_or_string',
		'number',        'varname_args',  'varpart',       'varpart_single',
    ];

    static public $yyRuleName = [
        /*   0 */ "start ::= body",
        /*   1 */ "body ::= body code",
        /*   2 */ "body ::=",
        /*   3 */ "code ::= T_TAG_OPEN stmts",
        /*   4 */ "code ::= T_HTML",
        /*   5 */ "code ::= T_COMMENT",
        /*   6 */ "code ::= T_PRINT_OPEN expr T_PRINT_CLOSE",
        /*   7 */ "stmts ::= T_EXTENDS var_or_string T_TAG_CLOSE",
        /*   8 */ "stmts ::= stmt T_TAG_CLOSE",
        /*   9 */ "stmts ::= for_stmt",
        /*  10 */ "stmts ::= ifchanged_stmt",
        /*  11 */ "stmts ::= block_stmt",
        /*  12 */ "stmts ::= filter_stmt",
        /*  13 */ "stmts ::= if_stmt",
        /*  14 */ "stmts ::= T_INCLUDE var_or_string T_TAG_CLOSE",
        /*  15 */ "stmts ::= custom_tag",
        /*  16 */ "stmts ::= alias",
        /*  17 */ "stmts ::= ifequal",
        /*  18 */ "stmts ::= T_AUTOESCAPE varname T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  19 */ "custom_tag ::= T_CUSTOM_TAG T_TAG_CLOSE",
        /*  20 */ "custom_tag ::= T_CUSTOM_TAG T_AS varname T_TAG_CLOSE",
        /*  21 */ "custom_tag ::= T_CUSTOM_TAG params T_TAG_CLOSE",
        /*  22 */ "custom_tag ::= T_CUSTOM_TAG params T_AS varname T_TAG_CLOSE",
        /*  23 */ "custom_tag ::= T_CUSTOM_BLOCK T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  24 */ "custom_tag ::= T_CUSTOM_BLOCK params T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  25 */ "custom_tag ::= T_SPACEFULL T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  26 */ "alias ::= T_WITH varname T_AS varname T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  27 */ "stmt ::= T_SET varname T_ASSIGN expr",
        /*  28 */ "stmt ::= regroup",
        /*  29 */ "stmt ::= T_LOAD string",
        /*  30 */ "for_def ::= T_FOR varname T_IN filtered_var T_TAG_CLOSE",
        /*  31 */ "for_def ::= T_FOR varname T_COMMA varname T_IN filtered_var T_TAG_CLOSE",
        /*  32 */ "for_stmt ::= for_def body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  33 */ "for_stmt ::= T_FOR varname T_IN range T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  34 */ "for_stmt ::= T_FOR varname T_IN range T_STEP numvar T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  35 */ "for_stmt ::= for_def body T_TAG_OPEN T_EMPTY T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  36 */ "if_stmt ::= T_IF expr T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  37 */ "if_stmt ::= T_IF expr T_TAG_CLOSE body T_TAG_OPEN T_ELSE T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  38 */ "ifchanged_stmt ::= T_IFCHANGED T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  39 */ "ifchanged_stmt ::= T_IFCHANGED params T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  40 */ "ifchanged_stmt ::= T_IFCHANGED T_TAG_CLOSE body T_TAG_OPEN T_ELSE T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  41 */ "ifchanged_stmt ::= T_IFCHANGED params T_TAG_CLOSE body T_TAG_OPEN T_ELSE T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  42 */ "ifequal ::= T_IFEQUAL fvar_or_string fvar_or_string T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  43 */ "ifequal ::= T_IFEQUAL fvar_or_string fvar_or_string T_TAG_CLOSE body T_TAG_OPEN T_ELSE T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  44 */ "ifequal ::= T_IFNOTEQUAL fvar_or_string fvar_or_string T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  45 */ "ifequal ::= T_IFNOTEQUAL fvar_or_string fvar_or_string T_TAG_CLOSE body T_TAG_OPEN T_ELSE T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  46 */ "block_stmt ::= T_BLOCK varname T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  47 */ "block_stmt ::= T_BLOCK varname T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END varname T_TAG_CLOSE",
        /*  48 */ "block_stmt ::= T_BLOCK number T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  49 */ "block_stmt ::= T_BLOCK number T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END number T_TAG_CLOSE",
        /*  50 */ "filter_stmt ::= T_FILTER filtered_var T_TAG_CLOSE body T_TAG_OPEN T_CUSTOM_END T_TAG_CLOSE",
        /*  51 */ "regroup ::= T_REGROUP filtered_var T_BY varname T_AS varname",
        /*  52 */ "filtered_var ::= filtered_var T_FILTER_PIPE varname_args",
        /*  53 */ "filtered_var ::= string T_FILTER_PIPE varname_args",
        /*  54 */ "filtered_var ::= varname_args",
        /*  55 */ "varname_args ::= varname T_COLON var_or_string",
        /*  56 */ "varname_args ::= varname",
        /*  57 */ "params ::= params var_or_string",
        /*  58 */ "params ::= params T_COMMA var_or_string",
        /*  59 */ "params ::= var_or_string",
        /*  60 */ "var_or_string ::= varname",
        /*  61 */ "var_or_string ::= number",
        /*  62 */ "var_or_string ::= T_TRUE|T_FALSE",
        /*  63 */ "var_or_string ::= string",
        /*  64 */ "fvar_or_string ::= filtered_var",
        /*  65 */ "fvar_or_string ::= number",
        /*  66 */ "fvar_or_string ::= T_TRUE|T_FALSE",
        /*  67 */ "fvar_or_string ::= string",
        /*  68 */ "string ::= T_STRING",
        /*  69 */ "string ::= T_INTL T_STRING T_RPARENT",
        /*  70 */ "expr ::= expr T_QUESTION expr T_COLON expr",
        /*  71 */ "expr ::= T_NOT expr",
        /*  72 */ "expr ::= expr T_AND expr",
        /*  73 */ "expr ::= expr T_OR expr",
        /*  74 */ "expr ::= expr T_PLUS|T_MINUS|T_CONCAT expr",
        /*  75 */ "expr ::= expr T_EQ|T_NE|T_GT|T_GE|T_LT|T_LE|T_IN expr",
        /*  76 */ "expr ::= expr T_TIMES|T_DIV|T_MOD expr",
        /*  77 */ "expr ::= expr T_BITWISE expr",
        /*  78 */ "expr ::= expr T_PIPE expr",
        /*  79 */ "expr ::= T_LPARENT expr T_RPARENT",
        /*  80 */ "expr ::= fvar_or_string",
        /*  81 */ "varname ::= varpart T_LPARENT T_RPARENT",
        /*  82 */ "varname ::= varpart T_LPARENT params T_RPARENT",
        /*  83 */ "varname ::= varpart",
        /*  84 */ "varpart ::= varpart T_OBJ|T_DOT varpart_single",
        /*  85 */ "varpart ::= varpart T_CLASS varpart_single",
        /*  86 */ "varpart ::= varpart T_BRACKETS_OPEN var_or_string T_BRACKETS_CLOSE",
        /*  87 */ "varpart ::= varpart_single",
        /*  88 */ "varpart_single ::= T_ALPHA|T_BLOCK|T_CUSTOM_TAG|T_CUSTOM_END|T_CUSTOM_BLOCK",
        /*  89 */ "range ::= numvar T_DOTDOT numvar",
        /*  90 */ "numvar ::= number",
        /*  91 */ "numvar ::= varname",
        /*  92 */ "number ::= T_NUMERIC",
        /*  93 */ "number ::= T_MINUS T_NUMERIC",
    ];

    private $_retvalue;

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;

        if ($this->yyidx === null || $this->yyidx < 0)
        {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new StackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = [];
            array_push($this->yystack, $x);
        }

        $yyendofinput = ($yymajor==0);

        if (self::$yyTraceFile)
        {
            fprintf(
                self::$yyTraceFile,
                "%sInput %s\n",
                self::$yyTracePrompt,
                self::$yyTokenName[$yymajor]
            );
        }

        do
        {
            $yyact = $this->yyFindShiftAction($yymajor);

            if ($yymajor < self::YYERRORSYMBOL && !$this->yyIsExpectedToken($yymajor))
            {
                $yyact = self::YY_ERROR_ACTION;
            }

            if ($yyact < self::YYNSTATE)
            {
                $this->yyShift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;

                if ($yyendofinput && $this->yyidx >= 0)
                {
                    $yymajor = 0;
                }
                else
                {
                    $yymajor = self::YYNOCODE;
                }
            }
            elseif ($yyact < self::YYNSTATE + self::YYNRULE)
            {
                $this->yyReduce($yyact - self::YYNSTATE);
            }
            elseif ($yyact == self::YY_ERROR_ACTION)
            {
                if (self::$yyTraceFile)
                {
                    fprintf(
                        self::$yyTraceFile,
                        "%sSyntax Error!\n",
                        self::$yyTracePrompt
                    );
                }

                if (self::YYERRORSYMBOL)
                {
                    if ($this->yyerrcnt < 0)
                    {
                        $this->yySyntaxError($yymajor, $yytokenvalue);
                    }

                    $yymx = $this->yystack[$this->yyidx]->major;

                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit )
                    {
                        if (self::$yyTraceFile)
                        {
                            fprintf(
                                self::$yyTraceFile,
                                "%sDiscard input token %s\n",
                                self::$yyTracePrompt,
                                self::$yyTokenName[$yymajor]
                            );
                        }
                        $this->yyDestructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    }
                    else
                    {
                        while ($this->yyidx >= 0
                            && $yymx != self::YYERRORSYMBOL
                            && ($yyact = $this->yyFindShiftAction(self::YYERRORSYMBOL)) >= self::YYNSTATE)
                        {
                            $this->yyPopParserStack();
                        }

                        if ($this->yyidx < 0 || $yymajor==0)
                        {
                            $this->yyDestructor($yymajor, $yytokenvalue);
                            $this->yyParseFailed();
                            $yymajor = self::YYNOCODE;
                        }
                        elseif ($yymx != self::YYERRORSYMBOL)
                        {
                            $u2 = 0;
                            $this->yyShift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                }
                else
                {
                    if ($this->yyerrcnt <= 0)
                    {
                        $this->yySyntaxError($yymajor, $yytokenvalue);
                    }

                    $this->yyerrcnt = 3;
                    $this->yyDestructor($yymajor, $yytokenvalue);

                    if ($yyendofinput)
                    {
                        $this->yyParseFailed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            }
            else
            {
                $this->yyAccept();
                $yymajor = self::YYNOCODE;
            }
        }
        while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }

    protected function tokenName($tokenType)
    {
        if ($tokenType === 0)
        {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count(self::$yyTokenName))
        {
            return self::$yyTokenName[$tokenType];
        }
        else
        {
            return "Unknown";
        }
    }

    protected static function yyDestructor($yymajor, $yypminor)
    {
        switch ($yymajor)
        {
            default: break;
        }
    }

    protected function yyPopParserStack()
    {
        if (! count($this->yystack))
        {
            return;
        }

        $yytos = array_pop($this->yystack);

        if (self::$yyTraceFile && $this->yyidx >= 0)
        {
            fwrite(self::$yyTraceFile,
                self::$yyTracePrompt . 'Popping ' . self::$yyTokenName[$yytos->major] .
                    "\n");
        }

        $yymajor = $yytos->major;

        self::yyDestructor($yymajor, $yytos->minor);

        $this->yyidx--;

        return $yymajor;
    }

    function __destruct()
    {
        while ($this->yyidx >= 0)
        {
            $this->yyPopParserStack();
        }

        if (is_resource(self::$yyTraceFile))
        {
            fclose(self::$yyTraceFile);
        }
    }

    protected function yyGetExpectedTokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];

        if (in_array($token, self::$yyExpectedTokens[$state], true))
        {
            return $expected;
        }

        $stack = $this->yystack;
        $yyidx = $this->yyidx;

        do
        {
            $yyact = $this->yyFindShiftAction($token);

            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE)
            {
                $done = 0;

                do
                {
                    if ($done++ == 100)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return array_unique($expected);
                    }

                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];

                    $nextstate = $this->yyFindReduceAction(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']
                    );

                    if (isset(self::$yyExpectedTokens[$nextstate]))
                    {
                        $expected += self::$yyExpectedTokens[$nextstate];

                        if (in_array($token, self::$yyExpectedTokens[$nextstate], true))
                        {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }

                    if ($nextstate < self::YYNSTATE)
                    {
                        $this->yyidx++;
                        $x = new StackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    }
                    elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return $expected;
                    }
                    else
                    {
                        $yyact = $nextstate;
                    }
                }
                while (true);
            }
            break;

        }
        while (true);

        return array_unique($expected);
    }

    protected function yyIsExpectedToken($token)
    {
        if ($token === 0)
        {
            return true;
        }

        $state = $this->yystack[$this->yyidx]->stateno;

        if (in_array($token, self::$yyExpectedTokens[$state], true))
        {
            return true;
        }

        $stack = $this->yystack;
        $yyidx = $this->yyidx;

        do
        {
            $yyact = $this->yyFindShiftAction($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE)
            {
                $done = 0;
                do
                {
                    if ($done++ == 100)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }

                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];

                    $nextstate = $this->yyFindReduceAction(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']
                    );

                    if (isset(self::$yyExpectedTokens[$nextstate]) && in_array($token, self::$yyExpectedTokens[$nextstate], true))
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }

                    if ($nextstate < self::YYNSTATE)
                    {
                        $this->yyidx++;
                        $x = new StackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    }
                    elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (! $token) {
                            return true;
                        }
                        return false;
                    }
                    elseif ($nextstate === self::YY_NO_ACTION)
                    {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    else
                    {
                        $yyact = $nextstate;
                    }
                }
                while (true);
            }
            break;
        }
        while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    protected function yyFindShiftAction($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        if (! isset(self::$yyShiftOfst[$stateno]))
        {
            return self::$yyDefault[$stateno];
        }

        $i = self::$yyShiftOfst[$stateno];

        if ($i === self::YY_SHIFT_USE_DFLT)
        {
            return self::$yyDefault[$stateno];
        }

        if ($iLookAhead == self::YYNOCODE)
        {
            return self::YY_NO_ACTION;
        }

        $i += $iLookAhead;

        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yyLookahead[$i] != $iLookAhead)
        {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFile)
                {
                    fwrite(self::$yyTraceFile, self::$yyTracePrompt . "FALLBACK " .
                        self::$yyTokenName[$iLookAhead] . " => " .
                        self::$yyTokenName[$iFallback] . "\n");
                }
                return $this->yyFindShiftAction($iFallback);
            }
            return self::$yyDefault[$stateno];
        }
        else
        {
            return self::$yyAction[$i];
        }
    }

    protected function yyFindReduceAction($stateno, $iLookAhead)
    {
        if (! isset(self::$yyReduceOfst[$stateno]))
        {
            return self::$yyDefault[$stateno];
        }

        $i = self::$yyReduceOfst[$stateno];

        if ($i == self::YY_REDUCE_USE_DFLT)
        {
            return self::$yyDefault[$stateno];
        }

        if ($iLookAhead == self::YYNOCODE)
        {
            return self::YY_NO_ACTION;
        }

        $i += $iLookAhead;

        if ($i < 0 || $i >= self::YY_SZ_ACTTAB || self::$yyLookahead[$i] != $iLookAhead)
        {
            return self::$yyDefault[$stateno];
        }
        else
        {
            return self::$yyAction[$i];
        }
    }

    protected function yyShift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;

        if ($this->yyidx >= self::YYSTACKDEPTH)
        {
            $this->yyidx--;

            if (self::$yyTraceFile)
            {
                fprintf(self::$yyTraceFile, "%sStack Overflow!\n", self::$yyTracePrompt);
            }

            while ($this->yyidx >= 0)
            {
                $this->yyPopParserStack();
            }
            return;
        }

        $yytos = new StackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;

        array_push($this->yystack, $yytos);

        if (self::$yyTraceFile && $this->yyidx > 0)
        {
            fprintf(self::$yyTraceFile, "%sShift %d\n", self::$yyTracePrompt, $yyNewState);
            fprintf(self::$yyTraceFile, "%sStack:", self::$yyTracePrompt);

            for ($i = 1; $i <= $this->yyidx; $i++)
            {
                fprintf(self::$yyTraceFile, " %s", self::$yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFile,"\n");
        }
    }

    function yyR0()
    {
        $this->body = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR1()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR2()
    {
        $this->_retvalue = [];
    }

    function yyR3()
    {
        if (count($this->yystack[$this->yyidx + 0]->minor))
        {
            $this->yystack[$this->yyidx + 0]->minor['line'] = $this->lex->getLine();
            $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
        }
    }

    function yyR4()
    {
        $this->_retvalue = [
            'operation' => 'html',
            'html'      => $this->yystack[$this->yyidx + 0]->minor,
            'line'      => $this->lex->getLine()
        ];
    }

    function yyR5()
    {
        $this->yystack[$this->yyidx + 0]->minor = rtrim($this->yystack[$this->yyidx + 0]->minor);
        $this->_retvalue = [
            'operation' => 'comment',
            'comment'   => $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR6()
    {
        $this->_retvalue = [
            'operation' => 'print_var',
            'expr'      => $this->yystack[$this->yyidx + -1]->minor,
            'line'      => $this->lex->getLine()
        ];
    }

    function yyR7()
    {
        $this->_retvalue = [
            'operation' => 'base',
            $this->yystack[$this->yyidx + -1]->minor
        ];
    }

    function yyR8()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }

    function yyR9()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR14()
    {
        $this->_retvalue = [
            'operation' => 'include',
            $this->yystack[$this->yyidx + -1]->minor
        ];
    }

    function yyR18()
    {
    	$this->yystack[$this->yyidx + -5]->minor = strtolower($this->yystack[$this->yyidx + -5]->minor);

    	if ($this->yystack[$this->yyidx + -5]->minor != 'on' && $this->yystack[$this->yyidx + -5]->minor != 'off')
        {
        	$this->error("Invalid autoescape param (".$this->yystack[$this->yyidx + -5]->minor."), it must be on or off");
    	}

    	if ($this->yystack[$this->yyidx + -1]->minor != "endautoescape")
        {
        	$this->error("Invalid close tag ".$this->yystack[$this->yyidx + -1]->minor.", it must be endautoescape");
    	}

    	$this->_retvalue = [
            'operation' => 'autoescape',
            'value'     => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR19()
    {
        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -1]->minor,
            'list'      => []
        ];
    }

    function yyR20()
    {
        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -3]->minor,
            'as'        => $this->yystack[$this->yyidx + -1]->minor,
            'list'      => []
        ];
    }

    function yyR21()
    {
        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -2]->minor,
            'list'      => $this->yystack[$this->yyidx + -1]->minor
        ];
    }

    function yyR22()
    {
        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -4]->minor,
            'as'        => $this->yystack[$this->yyidx + -1]->minor,
            'list'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR23()
    {
        if ('end'.$this->yystack[$this->yyidx + -5]->minor != $this->yystack[$this->yyidx + -1]->minor)
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor);
        }

        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor,
            'list'      => []
        ];
    }

    function yyR24()
    {
        if ('end'.$this->yystack[$this->yyidx + -6]->minor != $this->yystack[$this->yyidx + -1]->minor)
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor);
        }

        $this->_retvalue = [
            'operation' => 'custom_tag',
            'name'      => $this->yystack[$this->yyidx + -6]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor,
            'list'      => $this->yystack[$this->yyidx + -5]->minor
        ];
    }

    function yyR25()
    {
        if ('endspacefull' != $this->yystack[$this->yyidx + -1]->minor)
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor);
        }

        $this->_retvalue = [
            'operation' => 'spacefull',
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR26()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endwith")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endwith");
        }

        $this->_retvalue = [
            'operation' => 'alias',
            'var'       => $this->yystack[$this->yyidx + -7]->minor,
            'as'        => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR27()
    {
        $this->_retvalue = [
            'operation' => 'set',
            'var'       => $this->yystack[$this->yyidx + -2]->minor,
            'expr'      => $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR29()
    {
        if (is_file(dirname($this->compiler->getTemplateFile()) . '/' . $this->yystack[$this->yyidx + 0]->minor))
        {
            $this->yystack[$this->yyidx + 0]->minor = dirname($this->compiler->getTemplateFile()) . '/' . $this->yystack[$this->yyidx + 0]->minor;
        }
        elseif (is_file(getcwd() . '/' . $this->yystack[$this->yyidx + 0]->minor))
        {
            $this->yystack[$this->yyidx + 0]->minor = getcwd() . '/' . $this->yystack[$this->yyidx + 0]->minor;
        }

        if (! is_file($this->yystack[$this->yyidx + 0]->minor) || ! Compiler::getOption('enableLoad'))
        {
            $this->error($this->yystack[$this->yyidx + 0]->minor." is not a valid file");
        }

        require_once $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR30()
    {
        $var = $this->compiler->getContext($this->yystack[$this->yyidx + -1]->minor[0]);

        if (is_array($var) || $var instanceof Iterator)
        {
            $this->compiler->setContext($this->yystack[$this->yyidx + -3]->minor, current($var));
        }

        $this->_retvalue = [
            'operation' => 'loop',
            'variable'  => $this->yystack[$this->yyidx + -3]->minor,
            'index'     => null,
            'array'     => $this->yystack[$this->yyidx + -1]->minor
        ];
    }

    function yyR31()
    {
        $var = $this->compiler->getContext($this->yystack[$this->yyidx + -1]->minor[0]);

        if (is_array($var) || $var instanceof Iterator)
        {
            $this->compiler->setContext($this->yystack[$this->yyidx + -3]->minor, current($var));
        }

        $this->_retvalue = [
            'operation' => 'loop',
            'variable'  => $this->yystack[$this->yyidx + -3]->minor,
            'index'     => $this->yystack[$this->yyidx + -5]->minor,
            'array'     => $this->yystack[$this->yyidx + -1]->minor
        ];

    }

    function yyR32()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endfor")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endfor");
        }

        $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor;
        $this->_retvalue['body'] = $this->yystack[$this->yyidx + -3]->minor;
    }

    function yyR33()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endfor")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endfor");
        }

        $this->_retvalue = [
            'operation' => 'loop',
            'variable'  => $this->yystack[$this->yyidx + -7]->minor,
            'range'     => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor,
            'variable'  => $this->yystack[$this->yyidx + -7]->minor,
            'step'      => 1
        ];
    }

    function yyR34()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endfor")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endfor");
        }

        $this->_retvalue = [
            'operation' => 'loop',
            'variable'  => $this->yystack[$this->yyidx + -9]->minor,
            'range'     => $this->yystack[$this->yyidx + -7]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor,
            'variable'  => $this->yystack[$this->yyidx + -9]->minor,
            'step'      => $this->yystack[$this->yyidx + -5]->minor
        ];
    }

    function yyR35()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endfor")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endfor");
        }

        $this->_retvalue = $this->yystack[$this->yyidx + -8]->minor;
        $this->_retvalue['body']  = $this->yystack[$this->yyidx + -7]->minor;
        $this->_retvalue['empty'] = $this->yystack[$this->yyidx + -3]->minor;
    }

    function yyR36()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endif")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endif");
        }

        $this->_retvalue = [
            'operation' => 'if',
            'expr'      => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR37()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endif")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endif");
        }

        $this->_retvalue = [
            'operation' => 'if',
            'expr'      => $this->yystack[$this->yyidx + -9]->minor,
            'body'      => $this->yystack[$this->yyidx + -7]->minor,
            'else'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR38()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifchanged")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifchanged");
        }

        $this->_retvalue = [
            'operation' => 'ifchanged',
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR39()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifchanged")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifchanged");
        }

        $this->_retvalue = [
            'operation' => 'ifchanged',
            'body'      => $this->yystack[$this->yyidx + -3]->minor,
            'check'     => $this->yystack[$this->yyidx + -5]->minor
        ];
    }

    function yyR40()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifchanged")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifchanged");
        }

        $this->_retvalue = [
            'operation' => 'ifchanged',
            'body'      => $this->yystack[$this->yyidx + -7]->minor,
            'else'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR41()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifchanged")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifchanged");
        }

        $this->_retvalue = [
            'operation' => 'ifchanged',
            'body'      => $this->yystack[$this->yyidx + -7]->minor,
            'check'     => $this->yystack[$this->yyidx + -9]->minor,
            'else'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR42()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifequal")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifequal");
        }

        $this->_retvalue = [
            'operation' => 'ifequal',
            'cmp'       => '==',
            1           => $this->yystack[$this->yyidx + -6]->minor,
            2           => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR43()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifequal")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifequal");
        }

        $this->_retvalue = [
            'operation' => 'ifequal',
            'cmp'       => '==',
            1           => $this->yystack[$this->yyidx + -10]->minor,
            2           => $this->yystack[$this->yyidx + -9]->minor,
            'body'      => $this->yystack[$this->yyidx + -7]->minor,
            'else'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR44()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifnotequal")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifnotequal");
        }

        $this->_retvalue = [
            'operation' => 'ifequal',
            'cmp'       => '!=',
            1           => $this->yystack[$this->yyidx + -6]->minor,
            2           => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR45()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endifnotequal")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endifnotequal");
        }

        $this->_retvalue = [
            'operation' => 'ifequal',
            'cmp'       => '!=',
            1           => $this->yystack[$this->yyidx + -10]->minor,
            2           => $this->yystack[$this->yyidx + -9]->minor,
            'body'      => $this->yystack[$this->yyidx + -7]->minor,
            'else'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR46()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endblock")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endblock");
        }

        $this->_retvalue = [
            'operation' => 'block',
            'name'      => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR47()
    {
        if ($this->yystack[$this->yyidx + -2]->minor != "endblock")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -2]->minor.", expecting endblock");
        }

        $this->_retvalue = [
            'operation' => 'block',
            'name'      => $this->yystack[$this->yyidx + -6]->minor,
            'body'      => $this->yystack[$this->yyidx + -4]->minor
        ];
    }

    function yyR48()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endblock")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endblock");
        }

        $this->_retvalue = [
            'operation' => 'block',
            'name'      => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR50()
    {
        if ($this->yystack[$this->yyidx + -1]->minor != "endfilter")
        {
            $this->error("Unexpected ".$this->yystack[$this->yyidx + -1]->minor.", expecting endfilter");
        }

        $this->_retvalue = [
            'operation' => 'filter',
            'functions' => $this->yystack[$this->yyidx + -5]->minor,
            'body'      => $this->yystack[$this->yyidx + -3]->minor
        ];
    }

    function yyR51()
    {
        $this->_retvalue = [
            'operation' => 'regroup',
            'array'     => $this->yystack[$this->yyidx + -4]->minor,
            'row'       => $this->yystack[$this->yyidx + -2]->minor,
            'as'        => $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR52()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR53()
    {
        $this->_retvalue = [
            ['string' => $this->yystack[$this->yyidx + -2]->minor]
        ];

        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR54()
    {
        $this->_retvalue = [$this->yystack[$this->yyidx + 0]->minor];
    }

    function yyR55()
    {
        $this->_retvalue = [
            $this->yystack[$this->yyidx + -2]->minor,
            'args' => [$this->yystack[$this->yyidx + 0]->minor]
        ];
    }

    function yyR57()
    {
        $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
        $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }

    function yyR60()
    {
        $this->_retvalue = ['var' => $this->yystack[$this->yyidx + 0]->minor];
    }

    function yyR61()
    {
        $this->_retvalue = ['number' => $this->yystack[$this->yyidx + 0]->minor];
    }

    function yyR62()
    {
        $this->_retvalue = trim(@$this->yystack[$this->yyidx + 0]->minor);
    }

    function yyR63()
    {
        $this->_retvalue = ['string' => $this->yystack[$this->yyidx + 0]->minor];
    }

    function yyR64()
    {
        $this->_retvalue = ['var_filter' => $this->yystack[$this->yyidx + 0]->minor];
    }

    function yyR70()
    {
        $this->_retvalue = [
            'expr_cond' => $this->yystack[$this->yyidx + -4]->minor,
            'true' => $this->yystack[$this->yyidx + -2]->minor,
            'false' => $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR71()
    {
        $this->_retvalue = [
            'op_expr' => 'not',
            $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR72()
    {
        $this->_retvalue = [
            'op_expr' => @$this->yystack[$this->yyidx + -1]->minor,
            $this->yystack[$this->yyidx + -2]->minor,
            $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR75()
    {
        $this->_retvalue = [
            'op_expr' => trim(@$this->yystack[$this->yyidx + -1]->minor),
            $this->yystack[$this->yyidx + -2]->minor,
            $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    function yyR77()
    {
        $this->_retvalue = [
            'op_expr' => 'expr',
            [
                'op_expr' => @$this->yystack[$this->yyidx + -1]->minor,
                $this->yystack[$this->yyidx + -2]->minor,
                $this->yystack[$this->yyidx + 0]->minor
            ]
        ];
    }

    protected function yyR78()
    {
        $this->_retvalue = [
            'op_expr' => 'expr',
            [
                'op_expr' => '|',
                $this->yystack[$this->yyidx + -2]->minor,
                $this->yystack[$this->yyidx + 0]->minor
            ]
        ];
    }

    protected function yyR79()
    {
        $this->_retvalue = [
            'op_expr' => 'expr',
            $this->yystack[$this->yyidx + -1]->minor
        ];
    }

    protected function yyR81()
    {
        $this->_retvalue = BH::hexec($this->yystack[$this->yyidx + -2]->minor)->getArray();
    }

    protected function yyR82()
    {
        $tmp  = new AST;
        $args = array_merge([$this->yystack[$this->yyidx + -3]->minor], $this->yystack[$this->yyidx + -1]->minor);
        $this->_retvalue =  call_user_func_array([$tmp, 'exec'], $args);
    }

    protected function yyR83()
    {
        $this->_retvalue = current($this->compiler->generateVariableName($this->yystack[$this->yyidx + 0]->minor, false));
    }

    protected function yyR84()
    {
        if (! is_array($this->yystack[$this->yyidx + -2]->minor))
        {
            $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor];
        }
        else
        {
            $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
        }
        $this->_retvalue[] = ['object' => $this->yystack[$this->yyidx + 0]->minor];
    }

    protected function yyR85()
    {
        if (! is_array($this->yystack[$this->yyidx + -2]->minor))
        {
            $this->_retvalue = [$this->yystack[$this->yyidx + -2]->minor];
        }
        else
        {
            $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
        }
        $this->_retvalue[] = ['class' => '$'.$this->yystack[$this->yyidx + 0]->minor];
    }

    protected function yyR86()
    {
        if (! is_array($this->yystack[$this->yyidx + -3]->minor))
        {
            $this->_retvalue = [$this->yystack[$this->yyidx + -3]->minor];
        }
        else
        {
            $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor;
        }
        $this->_retvalue[]=$this->yystack[$this->yyidx + -1]->minor;
    }

    protected function yyR89()
    {
        $this->_retvalue = [
            $this->yystack[$this->yyidx + -2]->minor,
            $this->yystack[$this->yyidx + 0]->minor
        ];
    }

    protected function yyR93()
    {
        $this->_retvalue = -1 * ($this->yystack[$this->yyidx + 0]->minor);
    }

    protected function yyReduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];

        if (self::$yyTraceFile && $yyruleno >= 0 && $yyruleno < count(self::$yyRuleName))
        {
            fprintf(self::$yyTraceFile, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yyLefthandSide = null;

        if (array_key_exists($yyruleno, self::$yyReduceMap))
        {
            $this->_retvalue = null;
            $this->{'yyR' . self::$yyReduceMap[$yyruleno]}();
            $yyLefthandSide = $this->_retvalue;
        }

        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;

        for ($i = $yysize; $i; $i--)
        {
            array_pop($this->yystack);
        }

        $yyact = $this->yyFindReduceAction($this->yystack[$this->yyidx]->stateno, $yygoto);

        if ($yyact < self::YYNSTATE)
        {
            if (! self::$yyTraceFile && $yysize)
            {
                $this->yyidx++;
                $x = new StackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yyLefthandSide;
                $this->yystack[$this->yyidx] = $x;
            }
            else
            {
                $this->yyShift($yyact, $yygoto, $yyLefthandSide);
            }
        }
        elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1)
        {
            $this->yyAccept();
        }
    }

    protected function yyParseFailed()
    {
        if (self::$yyTraceFile)
        {
            fprintf(self::$yyTraceFile, "%sFail!\n", self::$yyTracePrompt);
        }

        while ($this->yyidx >= 0)
        {
            $this->yyPopParserStack();
        }
    }

    protected function yySyntaxError($yymajor, $token)
    {
	    $expect = [];

	    foreach ($this->yyGetExpectedTokens($yymajor) as $token)
        {
	        $expect[] = self::$yyTokenName[$token];
	    }

	    $this->error('Unexpected ' . $this->tokenName($yymajor) . '(' . $token. ')');
    }

    protected function yyAccept()
    {
        if (self::$yyTraceFile)
        {
            fprintf(self::$yyTraceFile, "%sAccept!\n", self::$yyTracePrompt);
        }

        while ($this->yyidx >= 0)
        {
            $stack = $this->yyPopParserStack();
        }
    }

    protected function error($text)
    {
        throw new BrioException($text . " in " . $this->compiler->getTemplateFile() . ":" . $this->lex->getLine());
    }

}
