<?php

namespace placer\brio\engine\generator;

use Exception;
use mako\utility\Str;
use placer\brio\engine\Compiler;

class PHP
{
    /**
     * Ident
     *
     * @var integer
     */
    protected $ident = 0;

    /**
     * Tabulation
     *
     * @var string
     */
    protected $tab = "    ";

    /**
     * Echo concat
     *
     * @var string
     */
    protected $echoConcat = '.';

    /**
     * Scope var name
     *
     * @var string
     */
    protected $scopeVariableName;

    /**
     * Transform the AST generated by the Compiler class
     *
     * @param  array   $opCode
     * @param  string  $scope
     * @return string  Equivalent PHP code
     */
    final function getCode(array $opCode, string $scope)
    {
        $this->scopeVariableName = $scope;

        $str = '';
        $size = count($opCode);

        for ($i=0; $i < $size; $i++)
        {
            $op = $opCode[$i];

            if (! isset($op['op']))
            {
                throw new Exception("Invalid \$opCode " . print_r($op, true));
            }

            if ($op['op'] == 'print')
            {
                do
                {
                    $next = $opCode[$i+1];

                    if (! isset($next) || $next['op'] != 'print')
                    {
                        break;
                    }

                    for ($e=0; $e < count($next); $e++)
                    {
                        if (!isset($next[$e]))
                        {
                            break;
                        }
                        $op[] = $next[$e];
                    }
                    $i++;
                }
                while(true);
            }

            if ($op['op'] == 'declare' || $op['op'] == 'append_var')
            {
                do
                {
                    $next = $opCode[$i+1];

                    if (! isset($next) || $next['op'] != 'append_var' || $next['name'] != $op['name'])
                    {
                        break;
                    }

                    for ($e=0; $e < count($next); $e++)
                    {
                        if (! isset($next[$e]))
                        {
                            break;
                        }
                        $op[] = $next[$e];
                    }
                    $i++;
                }
                while(true);
            }

            $method = Str::underscored2camel("php_{$op['op']}");

            if (! is_callable([$this, $method]))
            {
                throw new Exception("CodeGenerator: Missing method $method");
            }

            switch ($op['op'])
            {
                case 'end_for':
                case 'end_foreach':
                case 'end_if':
                case 'end_function':
                case 'else':
                    break;
                default:
                    $str .= $this->getIdent();
            }
            $str .= $this->$method($op);
        }
        return $str;
    }

    /**
     * Generate the string for the current tabulation
     *
     * @return string
     */
    protected function getIdent()
    {
        $str = PHP_EOL;
        $str .= str_repeat($this->tab, $this->ident);

        return $str;
    }

    /**
     * Generate php_comment string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpComment(array $op)
    {
        return "/* {$op['comment']} */";
    }

    /**
     * Generate php_function declaration string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpFunction(array $op)
    {
        $str = "function {$op['name']}(\${$this->scopeVariableName}, \$return = false, \$blocks = [])" . $this->getIdent() . "{";
        $this->ident++;
        return $str;
    }

    /**
     * Generate php_if string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpIf(array $op)
    {
        $str  = "if (" . $this->phpGenerateExpr($op['expr']) . ") {";
        $this->ident++;
        return $str;
    }

    /**
     * Generate php_else string
     *
     * @return string
     */
    protected function phpElse()
    {
        $this->ident--;
        $code = $this->getIdent() . "} else {";
        $this->ident++;
        return $code;
    }

    /**
     * Generate php_end_if string
     *
     * @return string
     */
    protected function phpEndIf()
    {
        return $this->phpEndBlock();
    }

    /**
     * Generate the stand-alone statement
     *
     * @param  array  $op
     * @return string
     */
    protected function phpExpr(array $op)
    {
        return $this->phpGenerateExpr($op[0]) . ";";
    }

    /**
     * Generate variable declaration
     *
     * @param  array  $op
     * @param  string $assign
     * @return string
     */
    protected function phpDeclare(array $op, $assign = '=')
    {
        $op['name'] = $this->phpGetVarname($op['name']);
        $str = "{$op['name']} {$assign} " . $this->phpGenerateStmt($op) . ";";  
        return $str;
    }

    /**
     * Get php_append_variable string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpAppendVar(array $op)
    {
        return $this->phpDeclare($op, '.=');
    }

    /**
     * Generate php_foreach string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpForeach(array $op)
    {
        $op['array'] = $this->phpGetVarname($op['array']);
        $op['value'] = $this->phpGetVarname($op['value']);

        $str = "foreach ({$op['array']} as ";

        if (! isset($op['key']))
        {
            $str .= " {$op['value']}";
        }
        else
        {
            $op['key'] = $this->phpGetVarname($op['key']);
            $str .= " {$op['key']} => {$op['value']}";
        }

        $str .= ") {";
        $this->ident++;
        return $str;
    }

    /**
     * Generate php_end_foreach string
     *
     * @return string
     */
    protected function phpEndForeach()
    {
        return $this->phpEndBlock();
    }

    /**
     * Generate php_for string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpFor(array $op)
    {
        $index = $this->phpGetVarname($op['index']);

        foreach (['min', 'max', 'step'] as $type)
        {
            if (is_array($op[$type]))
            {
                $$type = $this->phpGetVarname($op[$type]['var']);
            }
            else
            {
                $$type = $op[$type];
            }
        }

        $cmp  = "<=";

        if (is_numeric($step) && $step < 0)
        {
            $cmp = ">=";
        }

        if (is_numeric($min) && is_numeric($max) && $max < $min)
        {
            if (is_numeric($step) && $step > 0)
            {
                $step *= -1;
            }
            $cmp = ">=";
        }

        $str = "for ({$index} = {$min}; {$index} {$cmp} {$max}; {$index} += {$step}) {";
        $this->ident++;
        return $str;
    }

    /**
     * Generate php_end_for string
     *
     * @return string
     */
    protected function phpEndFor()
    {
        return $this->phpEndBlock();
    }

    /**
     *  Generate the closing for current block
     *
     *  @return string
     */
    protected function phpEndBlock()
    {
        $this->ident--;
        return $this->getIdent() . "}";
    }

    /**
     *  Generate php_and_function string
     *
     *  @return string
     */
    protected function phpEndFunction()
    {
        return $this->phpEndBlock();
    }

    /**
     * Generate php_function_calling string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpExec(array $op)
    {
        $str = '';

        if (is_string($op['name']))
        {
            $str .= $op['name'];
        }
        else
        {
            $function = $this->phpGetVarname($op['name']);
            $str .= $function;
        }

        $str .= '(';

        if (isset($op['args']))
        {
            $str .= $this->phpGenerateList($op['args']);
        }

        $str .= ')';
        return $str;
    }

    /**
     * Generate php_global string
     *
     * @param  array $op
     * @return string
     */
    protected function phpGlobal(array $op)
    {
        return "global \$" . implode(", \$", $op['vars']) . ";";
    }

    /**
     * Generate php_expression string
     *
     * @param  mixed  $expr
     * @return string
     */
    protected function phpGenerateExpr($expr)
    {
        $str = '';

        if (is_object($expr))
        {
            $expr = $expr->getArray();
        }

        if (is_array($expr) && isset($expr['op_expr']))
        {
            if ($expr['op_expr'] == 'expr')
            {
                $str .= "(";
                $str .= $this->phpGenerateExpr($expr[0]);
                $str .= ")";
            }
            else if ($expr['op_expr'] == 'not')
            {
                $str .= "!" . $this->phpGenerateExpr($expr[0]);
            }
            else
            {
                $str .= $this->phpGenerateExpr($expr[0]);

                if (is_object($expr['op_expr']))
                {
                    var_dump($expr);
                    die('unexpected error');
                }
                $str .= " {$expr['op_expr']} ";
                $str .= $this->phpGenerateExpr($expr[1]);
            }
        }
        else
        {
            if (is_array($expr))
            {
                $str .= $this->phpGenerateStmt([$expr]);
            }
            else
            {
                if ($expr === false)
                {
                    $expr = 'false';
                }
                else if ($expr === true)
                {
                    $expr = 'true';
                }
                $str .= $expr;
            }
        }
        return $str;
    }

    /**
     * Generate the expressions list for a function parameters
     *
     * @param  array  $values
     * @return string
     */
    protected function phpGenerateList(array $values)
    {
        $str = '';

        foreach ($values as $value)
        {
            $str .= $this->phpGenerateStmt([$value]);
            $str .= ", ";
        }
        return substr($str, 0, -2);
    }

    /**
     * Generate the representation of a statement
     *
     * @param  array  $op
     * @param  string $concat
     * @return string
     */
    protected function phpGenerateStmt(array $op, $concat = '.')
    {
        $str = "";

        for ($i=0; $i < count($op); $i++)
        {
            if (! isset($op[$i]))
            {
                continue;
            }

            if (! is_array($op[$i]))
            {
                throw new Exception("Malformed declaration " . print_r($op, true));
            }

            $key   = key($op[$i]);
            $value = current($op[$i]);

            switch ($key)
            {
                case 'array':
                    $str .= "[";
                    $str .= $this->phpGenerateList($value);
                    $str .= "]";
                    break;
                case 'function':
                case 'exec':
                    if (strlen($str) != 0 && $str[strlen($str) -1] != $concat) {
                        $str .= $concat;
                    }
                    $value = ['name' => $value, 'args' => $op[$i]['args']];
                    $str .= $this->phpExec($value, false);
                    $str .= $concat;
                    break;
                case 'key':
                    $str .= $this->phpGenerateStmt([$value[0]]) . " => " . $this->phpGenerateStmt([$value[1]]);
                    break;
                case 'string':
                    if ($str != "" && $str[strlen($str)-1] == "'") {
                        $str = substr($str, 0, -1);
                    } else {
                        $str .= "'";
                    }
                    $html = $this->addslashesEx($value);
                    $str .= $html . "'";
                    break;
                case 'var':
                    if (strlen($str) != 0 && $str[strlen($str) -1] != $concat) {
                        $str .= $concat;
                    }
                    $str .= $this->phpGetVarname($value). $concat;
                    break;
                case 'number':
                    if (!is_numeric($value)) {
                        throw new Exception("$value is not a valid number");
                    }
                    $str .= $value;
                    break;
                case 'op_expr':
                    if (strlen($str) != 0 && $str[strlen($str) -1] != $concat) {
                        $str .= $concat;
                    }
                    $str .= '(' . $this->phpGenerateExpr($op[$i]) . ')';
                    $str .= $concat;
                    break;
                case 'expr':
                    if (strlen($str) != 0 && $str[strlen($str) -1] != $concat) {
                        $str .= $concat;
                    }
                    $str .= $this->phpGenerateExpr($value);
                    $str .= $concat;
                    break;
                case 'expr_cond':
                    if (strlen($str) != 0 && $str[strlen($str) -1] != $concat) {
                        $str .= $concat;
                    }
                    $str .= "(";
                    $str .= $this->phpGenerateExpr($value);
                    $str .= " ? ";
                    $str .= $this->phpGenerateStmt([$op[$i]['true']]);
                    $str .= " : ";
                    $str .= $this->phpGenerateStmt([$op[$i]['false']]);
                    $str .= "){$concat}";
                    break;
                case 'constant':
                    $str = $value;
                    break;
                default:
                    throw new Exception("Don't know how to declare {$key} = {$value} (" . print_r($op, true));
            }
        }

        if ($str != "" && $str[strlen($str)-1] == $concat)
        {
            $str = substr($str, 0, -1);
        }
        return $str;
    }

    /**
     * Generate php_print string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpPrint(array $op)
    {
        $output = $this->phpGenerateStmt($op, $this->echoConcat);

        if ($output == "' '" && Compiler::getOption('stripWhitespace'))
        {
            return;
        }
        return 'echo ' . $output . ';';
    }

    /**
     * Generate the php_increment string
     *
     * @param  array  $op
     * @return string
     */
    protected function phpInc(array $op)
    {
        return "++" . $this->phpGetVarname($op['name']);
    }

    /**
     * Get variable name
     *
     * @param  mixed $var
     * @return string
     */
    protected function phpGetVarname($var)
    {
        if (is_array($var))
        {
            if (! is_string($var[0]))
            {
                if (count($var) == 1)
                {
                    return $this->phpGetVarname($var[0]);
                }
                else
                {
                    throw new Exception("Invalid variable definition " . print_r($var, true));
                }
            }

            $varName = $this->phpGetVarname($var[0]);

            for ($i=1; $i < count($var); $i++)
            {
                if (is_string($var[$i]))
                {
                    $varName .= "['" . $this->addslashesEx($var[$i]) . "']";
                }
                else if (is_array($var[$i]))
                {
                    if (isset($var[$i]['var']))
                    {
                        $varName .= '[' . $this->phpGetVarname($var[$i]['var']) . ']';
                    }
                    elseif (isset($var[$i]['string']))
                    {
                        $varName .= "['" . $this->addslashesEx($var[$i]['string']) . "']";
                    }
                    elseif (isset($var[$i]['number']))
                    {
                        $varName .= '[' . $var[$i]['number'] . ']';
                    }
                    elseif (isset($var[$i]['object']))
                    {
                        if (is_array($var[$i]['object']))
                        {
                            $varName .= '->{' . $this->phpGetVarname($var[$i]['object']['var']) . '}';
                        }
                        else
                        {
                            $varName .= '->' . $var[$i]['object'];
                        }
                    }
                    elseif (isset($var[$i]['class']))
                    {
                        $varName = substr($varName, 1);

                        if (is_array($var[$i]['class']))
                        {
                            $varName .= '::{' . $this->phpGetVarname($var[$i]['class']['var']) . '}';
                        }
                        else
                        {
                            $varName .= '::' . $var[$i]['class'];
                        }
                    }
                    elseif ($var[$i] === [])
                    {
                        $varName .= '[]';
                    }
                    else
                    {
                        throw new Exception('Unknown variable definition ' . print_r($var, true));
                    }
                }
            }
            return $varName;
        }
        else
        {
            return "\$" . $var;
        }
    }

    /**
     * Generate the php_return
     *
     * @param  array  $op
     * @return string
     */
    protected function phpReturn(array $op)
    {
        $code = "return " . $this->phpGenerateStmt($op) . ";";
        return $code;
    }

    /**
     * Addslashes the string
     *
     * @param  string $string
     * @return string
     */
	protected function addslashesEx(string $string)
	{
	    return str_replace(["\\", "'"], ["\\\\", "\\'"], $string);
	}

}
